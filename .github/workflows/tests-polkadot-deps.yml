name: Test with updated polkadot dependencies

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2
        with:
          ref: master
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.node-version }}-updated-dependencies
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-yarn-

      - name: delete yarn.lock
        run: rm -f yarn.lock
      - name: run yarn install
        run: yarn install
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

      - name: list dependencies
        run: echo "$(yarn list -AR --name-only)" > locked_dependencies.json
      - name: upload dependencies list
        uses: actions/upload-artifact@v3
        with:
          name: deps-${{ matrix.node-version }}
          path: locked_dependencies.json

      - name: yarn build
        run: yarn build
      - name: zip build
        run: zip -r build.zip .
      - name: upload build
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.node-version }}
          path: build.zip

  test:
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        node-version: [14.x]
        required: ['required']
        include:
          - node-version: 16.x
            required: 'optional'

    continue-on-error: ${{ matrix.required == 'optional' }}

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-${{ matrix.node-version }}
      - name: unzip
        run: unzip build.zip -d .
      - name: unit tests
        run: yarn test:ci

  integration_test:
    runs-on: ubuntu-latest

    needs: build

    strategy:
      matrix:
        image: ['latest']
        required: ['required']
        include:
          - image: 'latest-rc'
            required: 'optional'

    continue-on-error: ${{ matrix.required == 'optional' }}

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-14.x
      - name: unzip
        run: unzip build.zip -d .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: run integration tests
        timeout-minutes: 60
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: kilt/prototype-chain
          IMAGE_TAG: ${{ matrix.image }}
        run: |
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker run -d --rm -p 9944:9944 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --dev --ws-port 9944 --ws-external
          sleep 5s
          yarn test:integration:run
          docker stop $(docker ps -f ancestor=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -q)

  create-issue:
    runs-on: ubuntu-latest
    needs: [test, integration_test]
    if: failure()
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: deps-14.x
      - run: echo "DEPS=$(cat locked_dependencies.json)" >> $GITHUB_ENV
      - run: echo "TODAY=$(date '+%Y-%m-%d')" >> $GITHUB_ENV
      - name: issue-bot
        uses: imjohnbo/issue-bot@v3
        with:
          labels: 'bug, incompatible dependencies, automation'
          project: 10
          project-type: organization
          column: Backlog
          pinned: false
          close-previous: true
          linked-comments: true
          title: SDK no longer compatible with latest dependecies
          body: |-
            ## Incompatibilities detected

            A scheduled test workflow using the latest available dependencies matching our semver ranges has failed.
            We may need to constrain dependency ranges in our `package.json` or introduce fixes to recover compatibility.
            Below you can find a summary of depedency versions against which these tests were run.

            _Note: This issue was **automatically created** as a result of scheduled CI tests on {{env.TODAY}}._

            <details>
              <summary>Dependency versions</summary>

              {{env.DEPS}}
            </details>
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
