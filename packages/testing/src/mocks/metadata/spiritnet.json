{
  "magicNumber": 1635018093,
  "metadata": {
    "v14": {
      "lookup": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 1,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 2,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U8"
              },
              "docs": []
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index",
                      "docs": []
                    },
                    {
                      "name": "consumers",
                      "type": 7,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "providers",
                      "type": 7,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "sufficients",
                      "type": 7,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 4,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U64"
              },
              "docs": []
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "misc_frozen",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "fee_frozen",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 6,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U128"
              },
              "docs": []
            }
          },
          {
            "id": 7,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U32"
              },
              "docs": []
            }
          },
          {
            "id": 8,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 10,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 11,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 12,
                      "typeName": "Vec<DigestItem>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 12,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 13
                }
              },
              "docs": []
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 14,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 15,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 16
                }
              },
              "docs": []
            }
          },
          {
            "id": 16,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 17
                },
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 66,
                      "typeName": "Phase",
                      "docs": []
                    },
                    {
                      "name": "event",
                      "type": 17,
                      "typeName": "E",
                      "docs": []
                    },
                    {
                      "name": "topics",
                      "type": 67,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "spiritnet_runtime",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 18,
                          "typeName": "frame_system::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Indices",
                      "fields": [
                        {
                          "name": null,
                          "type": 26,
                          "typeName": "pallet_indices::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 27,
                          "typeName": "pallet_balances::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "ParachainStaking",
                      "fields": [
                        {
                          "name": null,
                          "type": 29,
                          "typeName": "parachain_staking::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "name": null,
                          "type": 31,
                          "typeName": "pallet_session::Event",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "name": null,
                          "type": 32,
                          "typeName": "pallet_democracy::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "name": null,
                          "type": 41,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "TechnicalMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 42,
                          "typeName": "pallet_membership::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 43,
                          "typeName": "pallet_treasury::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": []
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": 44,
                          "typeName": "pallet_utility::Event",
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": []
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "name": null,
                          "type": 45,
                          "typeName": "pallet_vesting::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 41,
                      "docs": []
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 46,
                          "typeName": "pallet_scheduler::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 42,
                      "docs": []
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": 50,
                          "typeName": "pallet_proxy::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 43,
                      "docs": []
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "name": null,
                          "type": 53,
                          "typeName": "pallet_preimage::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 44,
                      "docs": []
                    },
                    {
                      "name": "KiltLaunch",
                      "fields": [
                        {
                          "name": null,
                          "type": 54,
                          "typeName": "kilt_launch::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": []
                    },
                    {
                      "name": "Ctype",
                      "fields": [
                        {
                          "name": null,
                          "type": 55,
                          "typeName": "ctype::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": []
                    },
                    {
                      "name": "Attestation",
                      "fields": [
                        {
                          "name": null,
                          "type": 56,
                          "typeName": "attestation::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 62,
                      "docs": []
                    },
                    {
                      "name": "Delegation",
                      "fields": [
                        {
                          "name": null,
                          "type": 58,
                          "typeName": "delegation::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 63,
                      "docs": []
                    },
                    {
                      "name": "Did",
                      "fields": [
                        {
                          "name": null,
                          "type": 60,
                          "typeName": "did::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 64,
                      "docs": []
                    },
                    {
                      "name": "DidLookup",
                      "fields": [
                        {
                          "name": null,
                          "type": 61,
                          "typeName": "pallet_did_lookup::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 67,
                      "docs": []
                    },
                    {
                      "name": "Web3Names",
                      "fields": [
                        {
                          "name": null,
                          "type": 62,
                          "typeName": "pallet_web3_names::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 68,
                      "docs": []
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "name": null,
                          "type": 65,
                          "typeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 18,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 19,
                          "typeName": "DispatchInfo",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 22,
                          "typeName": "DispatchError",
                          "docs": []
                        },
                        {
                          "name": "dispatch_info",
                          "type": 19,
                          "typeName": "DispatchInfo",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 4,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "class",
                      "type": 20,
                      "typeName": "DispatchClass",
                      "docs": []
                    },
                    {
                      "name": "pays_fee",
                      "type": 21,
                      "typeName": "Pays",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchClass"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Operational",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Mandatory",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "Pays"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "No",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "CannotLookup",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "name": null,
                          "type": 23,
                          "typeName": "ModuleError",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "ConsumerRemaining",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "NoProviders",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "TooManyConsumers",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "name": null,
                          "type": 24,
                          "typeName": "TokenError",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "name": null,
                          "type": 25,
                          "typeName": "ArithmeticError",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "WouldDie",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "BelowMinimum",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "CannotCreate",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "UnknownAsset",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Frozen",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Unsupported",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "ArithmeticError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Overflow",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DivisionByZero",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IndexAssigned",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A account index was assigned."
                      ]
                    },
                    {
                      "name": "IndexFreed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A account index has been freed up (unassigned)."
                      ]
                    },
                    {
                      "name": "IndexFrozen",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A account index has been frozen to its current account ID."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "destination_status",
                          "type": 28,
                          "typeName": "Status",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Reserved",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "parachain_staking",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewRound",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "SessionIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new staking round has started.",
                        "\\[block number, round number\\]"
                      ]
                    },
                    {
                      "name": "EnteredTopCandidates",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A new account has joined the set of top candidates.",
                        "\\[account\\]"
                      ]
                    },
                    {
                      "name": "LeftTopCandidates",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An account was removed from the set of top candidates.",
                        "\\[account\\]"
                      ]
                    },
                    {
                      "name": "JoinedCollatorCandidates",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account has joined the set of collator candidates.",
                        "\\[account, amount staked by the new candidate\\]"
                      ]
                    },
                    {
                      "name": "CollatorStakedMore",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A collator candidate has increased the amount of funds at stake.",
                        "\\[collator's account, previous stake, new stake\\]"
                      ]
                    },
                    {
                      "name": "CollatorStakedLess",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A collator candidate has decreased the amount of funds at stake.",
                        "\\[collator's account, previous stake, new stake\\]"
                      ]
                    },
                    {
                      "name": "CollatorScheduledExit",
                      "fields": [
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "SessionIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "SessionIndex",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A collator candidate has started the process to leave the set of",
                        "candidates. \\[round number, collator's account, round number when",
                        "the collator will be effectively removed from the set of",
                        "candidates\\]"
                      ]
                    },
                    {
                      "name": "CollatorCanceledExit",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A collator candidate has canceled the process to leave the set of",
                        "candidates and was added back to the candidate pool. \\[collator's",
                        "account\\]"
                      ]
                    },
                    {
                      "name": "CandidateLeft",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has left the set of collator candidates.",
                        "\\[account, amount of funds un-staked\\]"
                      ]
                    },
                    {
                      "name": "CollatorRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "An account was forcedly removed from the  set of collator",
                        "candidates. \\[account, amount of funds un-staked\\]"
                      ]
                    },
                    {
                      "name": "MaxCandidateStakeChanged",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "The maximum candidate stake has been changed.",
                        "\\[new max amount\\]"
                      ]
                    },
                    {
                      "name": "DelegatorStakedMore",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A delegator has increased the amount of funds at stake for a",
                        "collator. \\[delegator's account, collator's account, previous",
                        "delegation stake, new delegation stake\\]"
                      ]
                    },
                    {
                      "name": "DelegatorStakedLess",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A delegator has decreased the amount of funds at stake for a",
                        "collator. \\[delegator's account, collator's account, previous",
                        "delegation stake, new delegation stake\\]"
                      ]
                    },
                    {
                      "name": "DelegatorLeft",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "An account has left the set of delegators.",
                        "\\[account, amount of funds un-staked\\]"
                      ]
                    },
                    {
                      "name": "Delegation",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "An account has delegated a new collator candidate.",
                        "\\[account, amount of funds staked, total amount of delegators' funds",
                        "staked for the collator candidate\\]"
                      ]
                    },
                    {
                      "name": "DelegationReplaced",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A new delegation has replaced an existing one in the set of ongoing",
                        "delegations for a collator candidate. \\[new delegator's account,",
                        "amount of funds staked in the new delegation, replaced delegator's",
                        "account, amount of funds staked in the replace delegation, collator",
                        "candidate's account, new total amount of delegators' funds staked",
                        "for the collator candidate\\]"
                      ]
                    },
                    {
                      "name": "DelegatorLeftCollator",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "An account has stopped delegating a collator candidate.",
                        "\\[account, collator candidate's account, old amount of delegators'",
                        "funds staked, new amount of delegators' funds staked\\]"
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "A collator or a delegator has received a reward.",
                        "\\[account, amount of reward\\]"
                      ]
                    },
                    {
                      "name": "RoundInflationSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "Perquintill",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "Perquintill",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "Perquintill",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "Perquintill",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Inflation configuration for future validation rounds has changed.",
                        "\\[maximum collator's staking rate, maximum collator's reward rate,",
                        "maximum delegator's staking rate, maximum delegator's reward rate\\]"
                      ]
                    },
                    {
                      "name": "MaxSelectedCandidatesSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "The maximum number of collator candidates selected in future",
                        "validation rounds has changed. \\[old value, new value\\]"
                      ]
                    },
                    {
                      "name": "BlocksPerRoundSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "SessionIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "The length in blocks for future validation rounds has changed.",
                        "\\[round number, first block in the current round, old value, new",
                        "value\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perquintill"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 7,
                          "typeName": "SessionIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 7,
                          "typeName": "PropIndex",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion has been proposed by a public account."
                      ]
                    },
                    {
                      "name": "Tabled",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 7,
                          "typeName": "PropIndex",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "depositors",
                          "type": 33,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A public proposal has been tabled for referendum vote."
                      ]
                    },
                    {
                      "name": "ExternalTabled",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "An external proposal has been tabled."
                      ]
                    },
                    {
                      "name": "Started",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 34,
                          "typeName": "VoteThreshold",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A referendum has begun."
                      ]
                    },
                    {
                      "name": "Passed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proposal has been approved by referendum."
                      ]
                    },
                    {
                      "name": "NotPassed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A proposal has been rejected by referendum."
                      ]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A referendum has been cancelled."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 35,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A proposal has been enacted."
                      ]
                    },
                    {
                      "name": "Delegated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has delegated their vote to another account."
                      ]
                    },
                    {
                      "name": "Undelegated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "An account has cancelled a previous delegation operation."
                      ]
                    },
                    {
                      "name": "Vetoed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "until",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "An external proposal has been vetoed."
                      ]
                    },
                    {
                      "name": "PreimageNoted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A proposal's preimage was noted, and the deposit taken."
                      ]
                    },
                    {
                      "name": "PreimageUsed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A proposal preimage was removed and used (the deposit was returned)."
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "ref_index",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "A proposal could not be executed because its preimage was invalid."
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "ref_index",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A proposal could not be executed because its preimage was missing."
                      ]
                    },
                    {
                      "name": "PreimageReaped",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "reaper",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A registered preimage was removed and the deposit collected by the reaper."
                      ]
                    },
                    {
                      "name": "Blacklisted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "A proposal_hash has been blacklisted permanently."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "voter",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "ref_index",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        },
                        {
                          "name": "vote",
                          "type": 37,
                          "typeName": "AccountVote<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "An account has voted in a referendum"
                      ]
                    },
                    {
                      "name": "Seconded",
                      "fields": [
                        {
                          "name": "seconder",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "prop_index",
                          "type": 7,
                          "typeName": "PropIndex",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "An account has secconded a proposal"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 33,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 0
                }
              },
              "docs": []
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "pallet_democracy",
                "vote_threshold",
                "VoteThreshold"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SuperMajorityApprove",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "SuperMajorityAgainst",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "SimpleMajority",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 36
                },
                {
                  "name": "E",
                  "type": 22
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "name": null,
                          "type": 36,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "name": null,
                          "type": 22,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 36,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": []
              },
              "docs": []
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "AccountVote"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Standard",
                      "fields": [
                        {
                          "name": "vote",
                          "type": 38,
                          "typeName": "Vote",
                          "docs": []
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Split",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Vote"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_index",
                          "type": 7,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "voted",
                          "type": 40,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 35,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 35,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 40,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "Bool"
              },
              "docs": []
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_index",
                          "type": 7,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "voted",
                          "type": 40,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 35,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 35,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The given member was added; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The given member was removed; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersSwapped",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Two members were swapped; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersReset",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The membership was reset; see the transaction for who the new set is."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "One of the members' keys changed."
                      ]
                    },
                    {
                      "name": "Dummy",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Phantom member, never used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 7,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New proposal."
                      ]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": "budget_remaining",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds."
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 7,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "award",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some funds have been allocated."
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 7,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "slashed",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proposal was rejected; funds were slashed."
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": "burnt_funds",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some of our funds have been burnt."
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": "rollover_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some funds have been deposited."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 44,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "error",
                          "type": 22,
                          "typeName": "DispatchError",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 35,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingUpdated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "unvested",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The amount vested has been updated. This could indicate a change in funds available.",
                        "The balance given is the amount which is left unvested (and thus locked)."
                      ]
                    },
                    {
                      "name": "VestingCompleted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An \\[account\\] has become fully vested."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task."
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task."
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "task",
                          "type": 47,
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 48,
                          "typeName": "Option<Vec<u8>>",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 35,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task."
                      ]
                    },
                    {
                      "name": "CallLookupFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 47,
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 48,
                          "typeName": "Option<Vec<u8>>",
                          "docs": []
                        },
                        {
                          "name": "error",
                          "type": 49,
                          "typeName": "LookupError",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The call for the provided hash was not found so the task has been aborted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  7
                ]
              },
              "docs": []
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "LookupError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "BadFormat",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "name": "result",
                          "type": 35,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A proxy was executed correctly, with the given."
                      ]
                    },
                    {
                      "name": "AnonymousCreated",
                      "fields": [
                        {
                          "name": "anonymous",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 51,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "disambiguation_index",
                          "type": 52,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Anonymous account has been created by new proxy with given",
                        "disambiguation index and proxy type."
                      ]
                    },
                    {
                      "name": "Announced",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An announcement was placed to make a call in the future."
                      ]
                    },
                    {
                      "name": "ProxyAdded",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 51,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proxy was added."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 51,
            "type": {
              "path": [
                "spiritnet_runtime",
                "ProxyType"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NonTransfer",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Governance",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "ParachainStaking",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "CancelProxy",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "NonDepositClaiming",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 52,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U16"
              },
              "docs": []
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noted",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A preimage has been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A preimage has been requested."
                      ]
                    },
                    {
                      "name": "Cleared",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A preimage has ben cleared."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "kilt_launch",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlocked",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A KILT balance lock has been removed in the corresponding block.",
                        "\\[block, len\\]"
                      ]
                    },
                    {
                      "name": "LockedTransfer",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account transferred their locked balance to another account.",
                        "\\[from, value, target\\]"
                      ]
                    },
                    {
                      "name": "AddedKiltLock",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A KILT balance lock has been set. \\[who, value, until\\]"
                      ]
                    },
                    {
                      "name": "AddedVesting",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Vesting has been added to an account. \\[who, per_block, total\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "ctype",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CTypeCreated",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "CtypeCreatorOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "CtypeHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new CType has been created.",
                        "\\[creator identifier, CType hash\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "attestation",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AttestationCreated",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AttesterOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "ClaimHashOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "CtypeHashOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 57,
                          "typeName": "Option<DelegationNodeIdOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new attestation has been created.",
                        "\\[attester ID, claim hash, CType hash, (optional) delegation ID\\]"
                      ]
                    },
                    {
                      "name": "AttestationRevoked",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AttesterOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "ClaimHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An attestation has been revoked.",
                        "\\[account id, claim hash\\]"
                      ]
                    },
                    {
                      "name": "AttestationRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AttesterOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "ClaimHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An attestation has been removed.",
                        "\\[account id, claim hash\\]"
                      ]
                    },
                    {
                      "name": "DepositReclaimed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "ClaimHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The deposit owner reclaimed a deposit by removing an attestation.",
                        "\\[account id, claim hash\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 57,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "delegation",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "HierarchyCreated",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "DelegatorIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "CtypeHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new hierarchy has been created.",
                        "\\[creator ID, root node ID, CTYPE hash\\]"
                      ]
                    },
                    {
                      "name": "HierarchyRevoked",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "DelegatorIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A hierarchy has been revoked.",
                        "\\[revoker ID, root node ID\\]"
                      ]
                    },
                    {
                      "name": "HierarchyRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "DelegatorIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A hierarchy has been removed from the storage on chain.",
                        "\\[remover ID, root node ID\\]"
                      ]
                    },
                    {
                      "name": "DelegationCreated",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "DelegatorIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "DelegatorIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 59,
                          "typeName": "Permissions",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new delegation has been created.",
                        "\\[creator ID, root node ID, delegation node ID, parent node ID,",
                        "delegate ID, permissions\\]"
                      ]
                    },
                    {
                      "name": "DelegationRevoked",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "DelegatorIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A delegation has been revoked.",
                        "\\[revoker ID, delegation node ID\\]"
                      ]
                    },
                    {
                      "name": "DelegationRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A delegation has been removed.",
                        "\\[remover ID, delegation node ID\\]"
                      ]
                    },
                    {
                      "name": "DepositReclaimed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The deposit owner reclaimed a deposit by removing a delegation",
                        "subtree. \\[revoker ID, delegation node ID\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "delegation",
                "delegation_hierarchy",
                "Permissions"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bits",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 60,
            "type": {
              "path": [
                "did",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DidCreated",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "DidIdentifierOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new DID has been created.",
                        "\\[transaction signer, DID identifier\\]"
                      ]
                    },
                    {
                      "name": "DidUpdated",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "DidIdentifierOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A DID has been updated.",
                        "\\[DID identifier\\]"
                      ]
                    },
                    {
                      "name": "DidDeleted",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "DidIdentifierOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A DID has been deleted.",
                        "\\[DID identifier\\]"
                      ]
                    },
                    {
                      "name": "DidCallDispatched",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "DidIdentifierOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 35,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A DID-authorised call has been executed.",
                        "\\[DID caller, dispatch result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 61,
            "type": {
              "path": [
                "pallet_did_lookup",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssociationEstablished",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "DidIdentifierOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new association between a DID and an account ID was created."
                      ]
                    },
                    {
                      "name": "AssociationRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "DidIdentifierOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An association between a DID and an account ID was removed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "pallet_web3_names",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Web3NameClaimed",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "Web3NameOwnerOf<T>",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": 63,
                          "typeName": "Web3NameOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new name has been claimed."
                      ]
                    },
                    {
                      "name": "Web3NameReleased",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "Web3NameOwnerOf<T>",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": 63,
                          "typeName": "Web3NameOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A name has been released."
                      ]
                    },
                    {
                      "name": "Web3NameBanned",
                      "fields": [
                        {
                          "name": "name",
                          "type": 63,
                          "typeName": "Web3NameOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A name has been banned."
                      ]
                    },
                    {
                      "name": "Web3NameUnbanned",
                      "fields": [
                        {
                          "name": "name",
                          "type": 63,
                          "typeName": "Web3NameOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A name has been unbanned."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "pallet_web3_names",
                "web3_name",
                "AsciiWeb3Name"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "MinLength",
                  "type": null
                },
                {
                  "name": "MaxLength",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 64,
                      "typeName": "BoundedVec<u8, MaxLength>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidationFunctionStored",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The validation function has been scheduled to apply."
                      ]
                    },
                    {
                      "name": "ValidationFunctionApplied",
                      "fields": [
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "RelayChainBlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The validation function was applied as of the contained relay chain block number."
                      ]
                    },
                    {
                      "name": "ValidationFunctionDiscarded",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The relay-chain aborted the upgrade process."
                      ]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "DownwardMessagesReceived",
                      "fields": [
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some downward messages have been received and will be processed.",
                        "\\[ count \\]"
                      ]
                    },
                    {
                      "name": "DownwardMessagesProcessed",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "relay_chain::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward messages were processed using the given weight.",
                        "\\[ weight_used, result_mqc_head \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Finalization",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Initialization",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 67,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 9
                }
              },
              "docs": []
            }
          },
          {
            "id": 68,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 47
                }
              },
              "docs": []
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 70,
                      "typeName": "codec::Compact<u32>",
                      "docs": []
                    },
                    {
                      "name": "spec_name",
                      "type": 71,
                      "typeName": "sp_runtime::RuntimeString",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 70,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 7
                }
              },
              "docs": []
            }
          },
          {
            "id": 71,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "Str"
              },
              "docs": []
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": 73,
                          "typeName": "Perbill",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A dispatch that will fill the block weight up to the given ratio."
                      ]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 4,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 74,
                          "typeName": "Vec<KeyValue>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 76,
                          "typeName": "Vec<Key>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 10,
                          "typeName": "Key",
                          "docs": []
                        },
                        {
                          "name": "subkeys",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 74,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 75
                }
              },
              "docs": []
            }
          },
          {
            "id": 75,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  10,
                  10
                ]
              },
              "docs": []
            }
          },
          {
            "id": 76,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 10
                }
              },
              "docs": []
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 4,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_block",
                      "type": 4,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "per_class",
                      "type": 78,
                      "typeName": "PerDispatchClass<WeightsPerClass>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 79
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 79,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 79,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 79,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 4,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 80,
                      "typeName": "Option<Weight>",
                      "docs": []
                    },
                    {
                      "name": "max_total",
                      "type": 80,
                      "typeName": "Option<Weight>",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": 80,
                      "typeName": "Option<Weight>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 82,
                      "typeName": "PerDispatchClass<u32>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 7
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 7,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 7,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 7,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "RuntimeDbWeight"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 4,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "write",
                      "type": 4,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 71,
                      "typeName": "RuntimeString",
                      "docs": []
                    },
                    {
                      "name": "impl_name",
                      "type": 71,
                      "typeName": "RuntimeString",
                      "docs": []
                    },
                    {
                      "name": "authoring_version",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "spec_version",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "impl_version",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "apis",
                      "type": 85,
                      "typeName": "ApisVec",
                      "docs": []
                    },
                    {
                      "name": "transaction_version",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 86
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 86,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 86,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 87
                }
              },
              "docs": []
            }
          },
          {
            "id": 87,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  88,
                  7
                ]
              },
              "docs": []
            }
          },
          {
            "id": 88,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 92,
                          "typeName": "T::Moment",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 92,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 4
                }
              },
              "docs": []
            }
          },
          {
            "id": 93,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  6,
                  40
                ]
              },
              "docs": []
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "claim",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Assign an previously unassigned index.",
                        "",
                        "Payment: `Deposit` is reserved from the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `index`: the index to be claimed. This must not be in use.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Assign an index already owned by the sender to another account. The balance reservation",
                        "is effectively transferred to the new account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `index`: the index to be re-assigned. This must be owned by the sender.",
                        "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One transfer operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight:",
                        "   - Reads: Indices Accounts, System Account (recipient)",
                        "   - Writes: Indices Accounts, System Account (recipient)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "free",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Free up an index owned by the sender.",
                        "",
                        "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                        "",
                        "- `index`: the index to be freed. This must be owned by the sender.",
                        "",
                        "Emits `IndexFreed` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        },
                        {
                          "name": "freeze",
                          "type": 40,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force an index to an account. This doesn't require a deposit. If the index is already",
                        "held, then any deposit is reimbursed to its current owner.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `index`: the index to be (re-)assigned.",
                        "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                        "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- Up to one reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight:",
                        "   - Reads: Indices Accounts, System Account (original owner)",
                        "   - Writes: Indices Accounts, System Account (original owner)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Freeze an index so it will always point to the sender account. This consumes the",
                        "deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must have a",
                        "non-frozen account `index`.",
                        "",
                        "- `index`: the index to be frozen in place.",
                        "",
                        "Emits `IndexFrozen` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- Up to one slash operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotAssigned",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The index was not already assigned."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The index is assigned to another account."
                      ]
                    },
                    {
                      "name": "InUse",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The index was not available."
                      ]
                    },
                    {
                      "name": "NotTransfer",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The source and destination accounts are identical."
                      ]
                    },
                    {
                      "name": "Permanent",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The index is permanent and may not be freed/changed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 97
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 99,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "pallet_balances",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 88,
                      "typeName": "LockIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reasons",
                      "type": 98,
                      "typeName": "Reasons",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "pallet_balances",
                "Reasons"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Misc",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "All",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 99,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 97
                }
              },
              "docs": []
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 101
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 102,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "pallet_balances",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 88
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 88,
                      "typeName": "ReserveIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 102,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 101
                }
              },
              "docs": []
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "pallet_balances",
                "Releases"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V2_0_0",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 104,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 108,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "---------------------------------",
                        "- Origin account is already in memory, so no DB operations for them.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "new_free",
                          "type": 108,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "new_reserved",
                          "type": 108,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 108,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 108,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "keep_alive",
                          "type": 40,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 36
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 106,
                          "typeName": "AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "name": null,
                          "type": 107,
                          "typeName": "[u8; 20]",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 106,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 36
                }
              },
              "docs": []
            }
          },
          {
            "id": 107,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 108,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 6
                }
              },
              "docs": []
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Balance too low to send value"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "u128",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V2",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 112,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 113
                }
              },
              "docs": []
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "WeightToFeeCoefficient"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "coeff_integer",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "coeff_frac",
                      "type": 73,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "negative",
                      "type": 40,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "degree",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 114,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 115
                }
              },
              "docs": []
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "pallet_authorship",
                "UncleEntryItem"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Author",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InclusionHeight",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Uncle",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "Hash",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 116,
                          "typeName": "Option<Author>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_uncles",
                      "fields": [
                        {
                          "name": "new_uncles",
                          "type": 118,
                          "typeName": "Vec<T::Header>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Provide a set of uncles."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 118,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 119
                }
              },
              "docs": []
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 120
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 9,
                      "typeName": "Hash::Output",
                      "docs": []
                    },
                    {
                      "name": "number",
                      "type": 92,
                      "typeName": "Number",
                      "docs": []
                    },
                    {
                      "name": "state_root",
                      "type": 9,
                      "typeName": "Hash::Output",
                      "docs": []
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 9,
                      "typeName": "Hash::Output",
                      "docs": []
                    },
                    {
                      "name": "digest",
                      "type": 11,
                      "typeName": "Digest",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "sp_runtime",
                "traits",
                "BlakeTwo256"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidUncleParent",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The uncle parent not in the chain."
                      ]
                    },
                    {
                      "name": "UnclesAlreadySet",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Uncles already set in the block."
                      ]
                    },
                    {
                      "name": "TooManyUncles",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Too many uncles."
                      ]
                    },
                    {
                      "name": "GenesisUncle",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The uncle is genesis."
                      ]
                    },
                    {
                      "name": "TooHighUncle",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The uncle is too high in chain."
                      ]
                    },
                    {
                      "name": "UncleAlreadyIncluded",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The uncle is already included."
                      ]
                    },
                    {
                      "name": "OldUncle",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The uncle isn't recent enough to be included."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "RoundInfo"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "current",
                      "type": 7,
                      "typeName": "SessionIndex",
                      "docs": []
                    },
                    {
                      "name": "first",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "length",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "DelegationCounter"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round",
                      "type": 7,
                      "typeName": "SessionIndex",
                      "docs": []
                    },
                    {
                      "name": "counter",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Delegator"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxCollatorsPerDelegator",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegations",
                      "type": 125,
                      "typeName": "OrderedSet<Stake<AccountId, Balance>, MaxCollatorsPerDelegator>",
                      "docs": []
                    },
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "parachain_staking",
                "set",
                "OrderedSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 126
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 127,
                      "typeName": "BoundedVec<T, S>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Stake"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 126
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 128,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 128,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 126
                }
              },
              "docs": []
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Candidate"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxDelegatorsPerCandidate",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "delegators",
                      "type": 130,
                      "typeName": "OrderedSet<Stake<AccountId, Balance>, MaxDelegatorsPerCandidate>",
                      "docs": []
                    },
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 132,
                      "typeName": "CandidateStatus",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "parachain_staking",
                "set",
                "OrderedSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 126
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 131,
                      "typeName": "BoundedVec<T, S>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 126
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 128,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CandidateStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Active",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Leaving",
                      "fields": [
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "SessionIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "TotalStake"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collators",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "delegators",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "parachain_staking",
                "set",
                "OrderedSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 126
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 135,
                      "typeName": "BoundedVec<T, S>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 126
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 128,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "parachain_staking",
                "inflation",
                "InflationInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collator",
                      "type": 137,
                      "typeName": "StakingInfo",
                      "docs": []
                    },
                    {
                      "name": "delegator",
                      "type": 137,
                      "typeName": "StakingInfo",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "parachain_staking",
                "inflation",
                "StakingInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_rate",
                      "type": 30,
                      "typeName": "Perquintill",
                      "docs": []
                    },
                    {
                      "name": "reward_rate",
                      "type": 138,
                      "typeName": "RewardRate",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "parachain_staking",
                "inflation",
                "RewardRate"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "annual",
                      "type": 30,
                      "typeName": "Perquintill",
                      "docs": []
                    },
                    {
                      "name": "per_block",
                      "type": 30,
                      "typeName": "Perquintill",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 6
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 140,
                      "typeName": "BTreeMap<K, V>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 141,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 141,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 142
                }
              },
              "docs": []
            }
          },
          {
            "id": 142,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "parachain_staking",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "force_new_round",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Forces the start of the new round in the next block.",
                        "",
                        "The new round will be enforced via <T as",
                        "ShouldEndSession<_>>::should_end_session.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account]",
                        "- Writes: ForceNewRound",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_inflation",
                      "fields": [
                        {
                          "name": "collator_max_rate_percentage",
                          "type": 30,
                          "typeName": "Perquintill",
                          "docs": []
                        },
                        {
                          "name": "collator_annual_reward_rate_percentage",
                          "type": 30,
                          "typeName": "Perquintill",
                          "docs": []
                        },
                        {
                          "name": "delegator_max_rate_percentage",
                          "type": 30,
                          "typeName": "Perquintill",
                          "docs": []
                        },
                        {
                          "name": "delegator_annual_reward_rate_percentage",
                          "type": 30,
                          "typeName": "Perquintill",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the annual inflation rate to derive per-round inflation.",
                        "",
                        "The inflation details are considered valid if the annual reward rate",
                        "is approximately the per-block reward rate multiplied by the",
                        "estimated* total number of blocks per year.",
                        "",
                        "The estimated average block time is twelve seconds.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "Emits `RoundInflationSet`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account]",
                        "- Writes: InflationConfig",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_max_selected_candidates",
                      "fields": [
                        {
                          "name": "new",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the maximum number of collator candidates that can be selected",
                        "at the beginning of each validation round.",
                        "",
                        "Changes are not applied until the start of the next round.",
                        "",
                        "The new value must be higher than the minimum allowed as set in the",
                        "pallet's configuration.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "Emits `MaxSelectedCandidatesSet`.",
                        "",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is mainly dependent on updating the",
                        "  `SelectedCandidates` storage in `select_top_candidates` which in",
                        "  return depends on the number of `MaxSelectedCandidates` (N).",
                        "- For each N, we read `CandidatePool` from the storage.",
                        "---------",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators of a",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: MaxSelectedCandidates, TopCandidates, N * CandidatePool",
                        "- Writes: MaxSelectedCandidates",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_blocks_per_round",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the number of blocks each validation round lasts.",
                        "",
                        "If the new value is less than the length of the current round, the",
                        "system will immediately move to the next round in the next block.",
                        "",
                        "The new value must be higher than the minimum allowed as set in the",
                        "pallet's configuration.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "Emits `BlocksPerRoundSet`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Round",
                        "- Writes: Round",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_max_candidate_stake",
                      "fields": [
                        {
                          "name": "new",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the maximal amount a collator can stake. Existing stakes are not",
                        "changed.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "Emits `MaxCandidateStakeChanged`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], MaxCollatorCandidateStake",
                        "- Writes: Round",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_remove_candidate",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Forcedly removes a collator candidate from the TopCandidates and",
                        "clears all associated storage for the candidate and their",
                        "delegators.",
                        "",
                        "Prepares unstaking of the candidates and their delegators stake",
                        "which can be unlocked via `unlock_unstaked` after waiting at",
                        "least `StakeDuration` many blocks.",
                        "",
                        "Emits `CandidateRemoved`.",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is mainly dependent on updating the",
                        "  `SelectedCandidates` storage in `select_top_candidates` which in",
                        "  return depends on the number of `MaxSelectedCandidates` (N).",
                        "- For each N, we read `CandidatePool` from the storage.",
                        "---------",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators of the",
                        "collator candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: MaxCollatorCandidateStake, 2 * N * CandidatePool,",
                        "  TopCandidates, BlockNumber, D * DelegatorState, D * Unstaking",
                        "- Writes: MaxCollatorCandidateStake, N * CandidatePool, D *",
                        "  DelegatorState, (D + 1) * Unstaking",
                        "- Kills: CandidatePool, DelegatorState for all delegators which only",
                        "  delegated to the candidate",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "join_candidates",
                      "fields": [
                        {
                          "name": "stake",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Join the set of collator candidates.",
                        "",
                        "In the next blocks, if the collator candidate has enough funds",
                        "staked to be included in any of the top `MaxSelectedCandidates`",
                        "positions, it will be included in the set of potential authors that",
                        "will be selected by the stake-weighted random selection function.",
                        "",
                        "The staked funds of the new collator candidate are added to the",
                        "total stake of the system.",
                        "",
                        "The total amount of funds staked must be within the allowed range as",
                        "set in the pallet's configuration.",
                        "",
                        "The dispatch origin must not be already part of the collator",
                        "candidates nor of the delegators set.",
                        "",
                        "Emits `JoinedCollatorCandidates`.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators for this",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: [Origin Account], DelegatorState,",
                        "  MaxCollatorCandidateStake, Locks, TotalCollatorStake,",
                        "  TopCandidates, MaxSelectedCandidates, CandidatePool,",
                        "- Writes: Locks, TotalCollatorStake, CandidatePool, TopCandidates,",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "init_leave_candidates",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Request to leave the set of collator candidates.",
                        "",
                        "On success, the account is immediately removed from the candidate",
                        "pool to prevent selection as a collator in future validation rounds,",
                        "but unstaking of the funds is executed with a delay of",
                        "`StakeDuration` blocks.",
                        "",
                        "The exit request can be reversed by calling",
                        "`cancel_leave_candidates`.",
                        "",
                        "This operation affects the pallet's total stake amount. It is",
                        "updated even though the funds of the candidate who signaled to leave",
                        "are still locked for `ExitDelay` + `StakeDuration` more blocks.",
                        "",
                        "NOTE: Upon starting a new session_i in `new_session`, the current",
                        "top candidates are selected to be block authors for session_i+1. Any",
                        "changes to the top candidates afterwards do not effect the set of",
                        "authors for session_i+1.",
                        "Thus, we have to make sure none of these collators can",
                        "leave before session_i+1 ends by delaying their",
                        "exit for `ExitDelay` many blocks.",
                        "",
                        "Emits `CollatorScheduledExit`.",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is mainly dependent on updating the",
                        "  `SelectedCandidates` storage in `select_top_candidates` which in",
                        "  return depends on the number of `MaxSelectedCandidates` (N).",
                        "- For each N, we read `CandidatePool` from the storage.",
                        "---------",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators for this",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: [Origin Account], TopCandidates, (N + 1) * CandidatePool,",
                        "  TotalCollatorStake",
                        "- Writes: CandidatePool, TopCandidates, TotalCollatorStake",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute_leave_candidates",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Execute the network exit of a candidate who requested to leave at",
                        "least `ExitQueueDelay` rounds ago. Prepares unstaking of the",
                        "candidates and their delegators stake which can be unlocked via",
                        "`unlock_unstaked` after waiting at least `StakeDuration` many",
                        "blocks.",
                        "",
                        "Requires the candidate to previously have called",
                        "`init_leave_candidates`.",
                        "",
                        "The exit request can be reversed by calling",
                        "`cancel_leave_candidates`.",
                        "",
                        "Emits `CollatorLeft`.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D + U) where  where N is `MaxSelectedCandidates`",
                        "bounded by `MaxTopCandidates`, D is the number of delegators for",
                        "this candidate bounded by `MaxDelegatorsPerCollator` and U is the",
                        "number of locked unstaking requests bounded by `MaxUnstakeRequests`.",
                        "- Reads: CandidatePool, Round, D * DelegatorState, D",
                        "  * BlockNumber, D * Unstaking",
                        "- Writes: D * Unstaking, D * DelegatorState, Total",
                        "- Kills: CandidatePool, DelegatorState",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_leave_candidates",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "Revert the previously requested exit of the network of a collator",
                        "candidate. On success, adds back the candidate to the TopCandidates",
                        "and updates the collators.",
                        "",
                        "Requires the candidate to previously have called",
                        "`init_leave_candidates`.",
                        "",
                        "Emits `CollatorCanceledExit`.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators for this",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: [Origin Account], TotalCollatorStake, TopCandidates,",
                        "  CandidatePool",
                        "- Writes: TotalCollatorStake, CandidatePool, TopCandidates",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "candidate_stake_more",
                      "fields": [
                        {
                          "name": "more",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Stake more funds for a collator candidate.",
                        "",
                        "If not in the set of candidates, staking enough funds allows the",
                        "account to be added to it. The larger amount of funds, the higher",
                        "chances to be selected as the author of the next block.",
                        "",
                        "This operation affects the pallet's total stake amount.",
                        "",
                        "The resulting total amount of funds staked must be within the",
                        "allowed range as set in the pallet's configuration.",
                        "",
                        "Emits `CollatorStakedMore`.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D + U) where  where N is `MaxSelectedCandidates`",
                        "bounded by `MaxTopCandidates`, D is the number of delegators for",
                        "this candidate bounded by `MaxDelegatorsPerCollator` and U is the",
                        "number of locked unstaking requests bounded by `MaxUnstakeRequests`.",
                        "- Reads: [Origin Account], Locks, TotalCollatorStake,",
                        "  MaxCollatorCandidateStake, TopCandidates, CandidatePool",
                        "- Writes: Locks, TotalCollatorStake, CandidatePool, TopCandidates",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "candidate_stake_less",
                      "fields": [
                        {
                          "name": "less",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Stake less funds for a collator candidate.",
                        "",
                        "If the new amount of staked fund is not large enough, the account",
                        "could be removed from the set of collator candidates and not be",
                        "considered for authoring the next blocks.",
                        "",
                        "This operation affects the pallet's total stake amount.",
                        "",
                        "The unstaked funds are not released immediately to the account, but",
                        "they will be available after `StakeDuration` blocks.",
                        "",
                        "The resulting total amount of funds staked must be within the",
                        "allowed range as set in the pallet's configuration.",
                        "",
                        "Emits `CollatorStakedLess`.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators for this",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: [Origin Account], Unstaking, TopCandidates,",
                        "  MaxSelectedCandidates, CandidatePool",
                        "- Writes: Unstaking, CandidatePool, TotalCollatorStake",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "join_delegators",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Join the set of delegators by delegating to a collator candidate.",
                        "",
                        "The account that wants to delegate cannot be part of the collator",
                        "candidates set as well.",
                        "",
                        "The caller must _not_ have delegated before. Otherwise,",
                        "`delegate_another_candidate` should be called.",
                        "",
                        "The amount staked must be larger than the minimum required to become",
                        "a delegator as set in the pallet's configuration.",
                        "",
                        "As only `MaxDelegatorsPerCollator` are allowed to delegate a given",
                        "collator, the amount staked must be larger than the lowest one in",
                        "the current set of delegator for the operation to be meaningful.",
                        "",
                        "The collator's total stake as well as the pallet's total stake are",
                        "increased accordingly.",
                        "",
                        "Emits `Delegation`.",
                        "Emits `DelegationReplaced` if the candidate has",
                        "`MaxDelegatorsPerCollator` many delegations but this delegator",
                        "staked more than one of the other delegators of this candidate.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators for this",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: [Origin Account], DelegatorState, TopCandidates,",
                        "  MaxSelectedCandidates, CandidatePool, LastDelegation, Round",
                        "- Writes: Locks, CandidatePool, DelegatorState, TotalCollatorStake,",
                        "  LastDelegation",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "delegate_another_candidate",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Delegate another collator's candidate by staking some funds and",
                        "increasing the pallet's as well as the collator's total stake.",
                        "",
                        "The account that wants to delegate cannot be part of the collator",
                        "candidates set as well.",
                        "",
                        "The caller _must_ have delegated before. Otherwise,",
                        "`join_delegators` should be called.",
                        "",
                        "If the delegator has already delegated the maximum number of",
                        "collator candidates, this operation will fail.",
                        "",
                        "The amount staked must be larger than the minimum required to become",
                        "a delegator as set in the pallet's configuration.",
                        "",
                        "As only `MaxDelegatorsPerCollator` are allowed to delegate a given",
                        "collator, the amount staked must be larger than the lowest one in",
                        "the current set of delegator for the operation to be meaningful.",
                        "",
                        "The collator's total stake as well as the pallet's total stake are",
                        "increased accordingly.",
                        "",
                        "NOTE: This transaction is expected to throw until we increase",
                        "`MaxCollatorsPerDelegator` by at least one, since it is currently",
                        "set to one.",
                        "",
                        "Emits `Delegation`.",
                        "Emits `DelegationReplaced` if the candidate has",
                        "`MaxDelegatorsPerCollator` many delegations but this delegator",
                        "staked more than one of the other delegators of this candidate.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators for this",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: [Origin Account], DelegatorState, TopCandidates,",
                        "  MaxSelectedCandidates, CandidatePool, LastDelegation, Round",
                        "- Writes: Locks, CandidatePool, DelegatorState, TotalCollatorStake,",
                        "  LastDelegation",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "leave_delegators",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Leave the set of delegators and, by implication, revoke all ongoing",
                        "delegations.",
                        "",
                        "All staked funds are not unlocked immediately, but they are added to",
                        "the queue of pending unstaking, and will effectively be released",
                        "after `StakeDuration` blocks from the moment the delegator leaves.",
                        "",
                        "This operation reduces the total stake of the pallet as well as the",
                        "stakes of all collators that were delegated, potentially affecting",
                        "their chances to be included in the set of candidates in the next",
                        "rounds.",
                        "",
                        "Emits `DelegatorLeft`.",
                        "",
                        "# <weight>",
                        "Weight: O(C) where C is the number of delegations for this delegator",
                        "which is bounded by by `MaxCollatorsPerDelegator`.",
                        "- Reads: [Origin Account], DelegatorState, BlockNumber, Unstaking,",
                        "  TopCandidates, MaxSelectedCandidates, C * CandidatePool,",
                        "- Writes: Unstaking, CandidatePool, TotalCollatorStake,",
                        "- Kills: DelegatorState",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "revoke_delegation",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Terminates an ongoing delegation for a given collator candidate.",
                        "",
                        "The staked funds are not unlocked immediately, but they are added to",
                        "the queue of pending unstaking, and will effectively be released",
                        "after `StakeDuration` blocks from the moment the delegation is",
                        "terminated.",
                        "",
                        "This operation reduces the total stake of the pallet as well as the",
                        "stakes of the collator involved, potentially affecting its chances",
                        "to be included in the set of candidates in the next rounds.",
                        "",
                        "Emits `DelegatorLeft`.",
                        "",
                        "# <weight>",
                        "Weight: O(C) where C is the number of delegations for this delegator",
                        "which is bounded by by `MaxCollatorsPerDelegator`.",
                        "- Reads: [Origin Account], DelegatorState, BlockNumber, Unstaking,",
                        "  Locks, TopCandidates, CandidatePool, MaxSelectedCandidates",
                        "- Writes: Unstaking, Locks, DelegatorState, CandidatePool,",
                        "  TotalCollatorStake",
                        "- Kills: DelegatorState if the delegator has not delegated to",
                        "  another collator",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "delegator_stake_more",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "more",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Increase the stake for delegating a collator candidate.",
                        "",
                        "If not in the set of candidates, staking enough funds allows the",
                        "collator candidate to be added to it.",
                        "",
                        "Emits `DelegatorStakedMore`.",
                        "",
                        "# <weight>",
                        "Weight: O(N) + O(D) where N is `MaxSelectedCandidates` bounded",
                        "by `MaxTopCandidates` and D the number of total delegators for",
                        "this collator bounded by `MaxCollatorsPerDelegator`.",
                        "bounded by `MaxUnstakeRequests`.",
                        "- Reads: [Origin Account], DelegatorState, BlockNumber, Unstaking,",
                        "  Locks, TopCandidates, CandidatePool, MaxSelectedCandidates",
                        "- Writes: Unstaking, Locks, DelegatorState, CandidatePool,",
                        "  TotalCollatorStake",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "delegator_stake_less",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "less",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Reduce the stake for delegating a collator candidate.",
                        "",
                        "If the new amount of staked fund is not large enough, the collator",
                        "could be removed from the set of collator candidates and not be",
                        "considered for authoring the next blocks.",
                        "",
                        "The unstaked funds are not release immediately to the account, but",
                        "they will be available after `StakeDuration` blocks.",
                        "",
                        "The remaining staked funds must still be larger than the minimum",
                        "required by this pallet to maintain the status of delegator.",
                        "",
                        "The resulting total amount of funds staked must be within the",
                        "allowed range as set in the pallet's configuration.",
                        "",
                        "Emits `DelegatorStakedLess`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], DelegatorState, BlockNumber, Unstaking,",
                        "  TopCandidates, CandidatePool, MaxSelectedCandidates",
                        "- Writes: Unstaking, DelegatorState, CandidatePool,",
                        "  TotalCollatorStake",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unlock_unstaked",
                      "fields": [
                        {
                          "name": "target",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Unlock all previously staked funds that are now available for",
                        "unlocking by the origin account after `StakeDuration` blocks have",
                        "elapsed.",
                        "",
                        "Weight: O(U) where U is the number of locked unstaking requests",
                        "bounded by `MaxUnstakeRequests`.",
                        "- Reads: [Origin Account], Unstaking, Locks",
                        "- Writes: Unstaking, Locks",
                        "- Kills: Unstaking & Locks if no balance is locked anymore",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "parachain_staking",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DelegatorNotFound",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The account is not part of the delegators set."
                      ]
                    },
                    {
                      "name": "CandidateNotFound",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The account is not part of the collator candidates set."
                      ]
                    },
                    {
                      "name": "DelegatorExists",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The account is already part of the delegators set."
                      ]
                    },
                    {
                      "name": "CandidateExists",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The account is already part of the collator candidates set."
                      ]
                    },
                    {
                      "name": "ValStakeZero",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The account tried to stake more or less with amount zero."
                      ]
                    },
                    {
                      "name": "ValStakeBelowMin",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The account has not staked enough funds to be added to the collator",
                        "candidates set."
                      ]
                    },
                    {
                      "name": "ValStakeAboveMax",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The account has already staked the maximum amount of funds possible."
                      ]
                    },
                    {
                      "name": "NomStakeBelowMin",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The account has not staked enough funds to become a delegator."
                      ]
                    },
                    {
                      "name": "DelegationBelowMin",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The account has not staked enough funds to delegate a collator",
                        "candidate."
                      ]
                    },
                    {
                      "name": "AlreadyLeaving",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The collator candidate has already trigger the process to leave the",
                        "set of collator candidates."
                      ]
                    },
                    {
                      "name": "NotLeaving",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The collator candidate wanted to execute the exit but has not",
                        "requested to leave before by calling `init_leave_candidates`."
                      ]
                    },
                    {
                      "name": "CannotLeaveYet",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "The collator tried to leave before waiting at least for",
                        "`ExitQueueDelay` many rounds."
                      ]
                    },
                    {
                      "name": "CannotJoinBeforeUnlocking",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The account has a full list of unstaking requests and needs to",
                        "unlock at least one of these before being able to join (again).",
                        "NOTE: Can only happen if the account was a candidate or",
                        "delegator before and either got kicked or exited voluntarily."
                      ]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "The account is already delegating the collator candidate."
                      ]
                    },
                    {
                      "name": "NotYetDelegating",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "The account has not delegated any collator candidate yet, hence it",
                        "is not in the set of delegators."
                      ]
                    },
                    {
                      "name": "DelegationsPerRoundExceeded",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "The delegator has exceeded the number of delegations per round which",
                        "is equal to MaxDelegatorsPerCollator.",
                        "",
                        "This protects against attacks in which a delegator can re-delegate",
                        "from a collator who has already authored a block, to another one",
                        "which has not in this round."
                      ]
                    },
                    {
                      "name": "TooManyDelegators",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "The collator candidate has already reached the maximum number of",
                        "delegators.",
                        "",
                        "This error is generated in case a new delegation request does not",
                        "stake enough funds to replace some other existing delegation."
                      ]
                    },
                    {
                      "name": "TooFewCollatorCandidates",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "The set of collator candidates would fall below the required minimum",
                        "if the collator left."
                      ]
                    },
                    {
                      "name": "CannotStakeIfLeaving",
                      "fields": [],
                      "index": 18,
                      "docs": [
                        "The collator candidate is in the process of leaving the set of",
                        "candidates and cannot perform any other actions in the meantime."
                      ]
                    },
                    {
                      "name": "CannotDelegateIfLeaving",
                      "fields": [],
                      "index": 19,
                      "docs": [
                        "The collator candidate is in the process of leaving the set of",
                        "candidates and thus cannot be delegated to."
                      ]
                    },
                    {
                      "name": "MaxCollatorsPerDelegatorExceeded",
                      "fields": [],
                      "index": 20,
                      "docs": [
                        "The delegator has already delegated the maximum number of candidates",
                        "allowed."
                      ]
                    },
                    {
                      "name": "AlreadyDelegatedCollator",
                      "fields": [],
                      "index": 21,
                      "docs": [
                        "The delegator has already previously delegated the collator",
                        "candidate."
                      ]
                    },
                    {
                      "name": "DelegationNotFound",
                      "fields": [],
                      "index": 22,
                      "docs": [
                        "The given delegation does not exist in the set of delegations."
                      ]
                    },
                    {
                      "name": "Underflow",
                      "fields": [],
                      "index": 23,
                      "docs": [
                        "The collator delegate or the delegator is trying to un-stake more",
                        "funds that are currently staked."
                      ]
                    },
                    {
                      "name": "CannotSetAboveMax",
                      "fields": [],
                      "index": 24,
                      "docs": [
                        "The number of selected candidates per staking round is",
                        "above the maximum value allowed."
                      ]
                    },
                    {
                      "name": "CannotSetBelowMin",
                      "fields": [],
                      "index": 25,
                      "docs": [
                        "The number of selected candidates per staking round is",
                        "below the minimum value allowed."
                      ]
                    },
                    {
                      "name": "InvalidSchedule",
                      "fields": [],
                      "index": 26,
                      "docs": [
                        "An invalid inflation configuration is trying to be set."
                      ]
                    },
                    {
                      "name": "NoMoreUnstaking",
                      "fields": [],
                      "index": 27,
                      "docs": [
                        "The staking reward being unlocked does not exist.",
                        "Max unlocking requests reached."
                      ]
                    },
                    {
                      "name": "StakeNotFound",
                      "fields": [],
                      "index": 28,
                      "docs": [
                        "Provided staked value is zero. Should never be thrown."
                      ]
                    },
                    {
                      "name": "UnstakingIsEmpty",
                      "fields": [],
                      "index": 29,
                      "docs": [
                        "Cannot unlock when Unstaked is empty."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 145,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 146
                }
              },
              "docs": []
            }
          },
          {
            "id": 146,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  147
                ]
              },
              "docs": []
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "spiritnet_runtime",
                "SessionKeys"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "aura",
                      "type": 148,
                      "typeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "sp_consensus_aura",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 149,
                      "typeName": "sr25519::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 150,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 7
                }
              },
              "docs": []
            }
          },
          {
            "id": 151,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  152,
                  10
                ]
              },
              "docs": []
            }
          },
          {
            "id": 152,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 147,
                          "typeName": "T::Keys",
                          "docs": []
                        },
                        {
                          "name": "proof",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                        "- DbWrites: `origin account`, `NextKeys`",
                        "- DbReads per key id: `KeyOwner`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                        "  of `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                        "- DbWrites: `NextKeys`, `origin account`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": 155,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 148
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 156,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 156,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 148
                }
              },
              "docs": []
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 158,
            "type": {
              "path": [
                "cumulus_pallet_aura_ext",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 159,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 160
                }
              },
              "docs": []
            }
          },
          {
            "id": 160,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  7,
                  9,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 161,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  33,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "pallet_democracy",
                "PreimageStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Missing",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Available",
                      "fields": [
                        {
                          "name": "data",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "since",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "expiry",
                          "type": 80,
                          "typeName": "Option<BlockNumber>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 163,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumInfo"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "name": null,
                          "type": 164,
                          "typeName": "ReferendumStatus<BlockNumber, Hash, Balance>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Finished",
                      "fields": [
                        {
                          "name": "approved",
                          "type": 40,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "end",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 34,
                      "typeName": "VoteThreshold",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "tally",
                      "type": 165,
                      "typeName": "Tally<Balance>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Tally"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ayes",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nays",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "turnout",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Voting"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Direct",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 167,
                          "typeName": "Vec<(ReferendumIndex, AccountVote<Balance>)>",
                          "docs": []
                        },
                        {
                          "name": "delegations",
                          "type": 169,
                          "typeName": "Delegations<Balance>",
                          "docs": []
                        },
                        {
                          "name": "prior",
                          "type": 170,
                          "typeName": "PriorLock<BlockNumber, Balance>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Delegating",
                      "fields": [
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": "conviction",
                          "type": 171,
                          "typeName": "Conviction",
                          "docs": []
                        },
                        {
                          "name": "delegations",
                          "type": 169,
                          "typeName": "Delegations<Balance>",
                          "docs": []
                        },
                        {
                          "name": "prior",
                          "type": 170,
                          "typeName": "PriorLock<BlockNumber, Balance>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 167,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 168
                }
              },
              "docs": []
            }
          },
          {
            "id": 168,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  7,
                  37
                ]
              },
              "docs": []
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Delegations"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "capital",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 170,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "PriorLock"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "pallet_democracy",
                "conviction",
                "Conviction"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Locked1x",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Locked2x",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Locked3x",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Locked4x",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Locked5x",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Locked6x",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 172,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  9,
                  34
                ]
              },
              "docs": []
            }
          },
          {
            "id": 173,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  33
                ]
              },
              "docs": []
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "pallet_democracy",
                "Releases"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 175,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 108,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a sensitive action to be taken.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender must",
                        "have funds to cover the deposit.",
                        "",
                        "- `proposal_hash`: The hash of the proposal preimage.",
                        "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                        "",
                        "Emits `Proposed`.",
                        "",
                        "Weight: `O(p)`"
                      ]
                    },
                    {
                      "name": "second",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 70,
                          "typeName": "PropIndex",
                          "docs": []
                        },
                        {
                          "name": "seconds_upper_bound",
                          "type": 70,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Signals agreement with a particular proposal.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender",
                        "must have funds to cover the deposit, equal to the original deposit.",
                        "",
                        "- `proposal`: The index of the proposal to second.",
                        "- `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                        "  proposal. Extrinsic is weighted according to this value with no refund.",
                        "",
                        "Weight: `O(S)` where S is the number of seconds a proposal already has."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 70,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        },
                        {
                          "name": "vote",
                          "type": 37,
                          "typeName": "AccountVote<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                        "otherwise it is a vote to keep the status quo.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `ref_index`: The index of the referendum to vote for.",
                        "- `vote`: The vote configuration.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter has voted on."
                      ]
                    },
                    {
                      "name": "emergency_cancel",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `CancellationOrigin`.",
                        "",
                        "-`ref_index`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "external_propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Schedule a referendum to be tabled once it is legal to schedule an external",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `ExternalOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
                        "  Decoding vec of length V. Charged as maximum"
                      ]
                    },
                    {
                      "name": "external_propose_majority",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                        "an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalMajorityOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "external_propose_default",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                        "schedule an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalDefaultOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "fast_track",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "voting_period",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                        "immediately. If there is no externally-proposed referendum currently, or if there is one",
                        "but it is not a majority-carries referendum then it fails.",
                        "",
                        "The dispatch of this call must be `FastTrackOrigin`.",
                        "",
                        "- `proposal_hash`: The hash of the current external proposal.",
                        "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                        "  `FastTrackVotingPeriod` if too low.",
                        "- `delay`: The number of block after voting has ended in approval and this should be",
                        "  enacted. This doesn't have a minimum amount.",
                        "",
                        "Emits `Started`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "veto_external",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Veto and blacklist the external proposal hash.",
                        "",
                        "The dispatch origin of this call must be `VetoOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                        "",
                        "Emits `Vetoed`.",
                        "",
                        "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                      ]
                    },
                    {
                      "name": "cancel_referendum",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 70,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove a referendum.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `ref_index`: The index of the referendum to cancel.",
                        "",
                        "# Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "cancel_queued",
                      "fields": [
                        {
                          "name": "which",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Cancel a proposal queued for enactment.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `which`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "conviction",
                          "type": 171,
                          "typeName": "Conviction",
                          "docs": []
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Delegate the voting power (with some given conviction) of the sending account.",
                        "",
                        "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                        "time appropriate for the conviction's lock period.",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                        "  - be delegating already; or",
                        "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                        "    through `reap_vote` or `unvote`).",
                        "",
                        "- `to`: The account whose voting the `target` account's voting power will follow.",
                        "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                        "  account is undelegated, the funds will be locked for the corresponding period.",
                        "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                        "  be more than the account's current balance.",
                        "",
                        "Emits `Delegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "undelegate",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "Undelegate the voting power of the sending account.",
                        "",
                        "Tokens may be unlocked following once an amount of time consistent with the lock period",
                        "of the conviction with which the delegation was issued.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the signing account must be",
                        "currently delegating.",
                        "",
                        "Emits `Undelegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "clear_public_proposals",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "Clears all public proposals.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                        "in the dispatch queue but does require a deposit, returned once enacted.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This requires the proposal to be",
                        "in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
                        "the preimage has not been uploaded before and matches some imminent proposal,",
                        "no fee is paid.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "reap_preimage",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "proposal_len_upper_bound",
                          "type": 70,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Remove an expired proposal preimage and collect the deposit.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `proposal_hash`: The preimage hash of a proposal.",
                        "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is",
                        "  weighted according to this value with no refund.",
                        "",
                        "This will only work after `VotingPeriod` blocks from the time that the preimage was",
                        "noted, if it's the same account doing it. If it's a different account, then it'll only",
                        "work an additional `EnactmentPeriod` later.",
                        "",
                        "Emits `PreimageReaped`.",
                        "",
                        "Weight: `O(D)` where D is length of proposal."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Unlock tokens that have an expired lock.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account to remove the lock on.",
                        "",
                        "Weight: `O(R)` with R number of vote of target."
                      ]
                    },
                    {
                      "name": "remove_vote",
                      "fields": [
                        {
                          "name": "index",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If:",
                        "- the referendum was cancelled, or",
                        "- the referendum is ongoing, or",
                        "- the referendum has ended such that",
                        "  - the vote of the account was in opposition to the result; or",
                        "  - there was no conviction to the account's vote; or",
                        "  - the account made a split vote",
                        "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                        "funds being available.",
                        "",
                        "If, however, the referendum has ended and:",
                        "- it finished corresponding to the vote of the account, and",
                        "- the account made a standard vote with conviction, and",
                        "- the lock period of the conviction is not over",
                        "...then the lock will be aggregated into the overall account's lock, which may involve",
                        "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                        "of both the amount locked and the time is it locked for).",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                        "registered for referendum `index`.",
                        "",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "remove_other_vote",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If the `target` is equal to the signer, then this function is exactly equivalent to",
                        "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                        "either because the referendum was cancelled, because the voter lost the referendum or",
                        "because the conviction period is over.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account of the vote to be removed; this account must have voted for",
                        "  referendum `index`.",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "enact_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 7,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Enact a proposal from a referendum. For now we just make the weight be the maximum."
                      ]
                    },
                    {
                      "name": "blacklist",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "maybe_ref_index",
                          "type": 176,
                          "typeName": "Option<ReferendumIndex>",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Permanently place a proposal into the blacklist. This prevents it from ever being",
                        "proposed again.",
                        "",
                        "If called on a queued public or external proposal, then this will result in it being",
                        "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                        "then it will be cancelled.",
                        "",
                        "The dispatch origin of this call must be `BlacklistOrigin`.",
                        "",
                        "- `proposal_hash`: The proposal hash to blacklist permanently.",
                        "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                        "cancelled.",
                        "",
                        "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                        "  reasonable value)."
                      ]
                    },
                    {
                      "name": "cancel_proposal",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 70,
                          "typeName": "PropIndex",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Remove a proposal.",
                        "",
                        "The dispatch origin of this call must be `CancelProposalOrigin`.",
                        "",
                        "- `prop_index`: The index of the proposal to cancel.",
                        "",
                        "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 176,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 7
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 7,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 177,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValueLow",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Value too low"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Proposal does not exist"
                      ]
                    },
                    {
                      "name": "AlreadyCanceled",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Cannot cancel the same proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Proposal already made"
                      ]
                    },
                    {
                      "name": "ProposalBlacklisted",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Proposal still blacklisted"
                      ]
                    },
                    {
                      "name": "NotSimpleMajority",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Next external proposal not simple majority"
                      ]
                    },
                    {
                      "name": "InvalidHash",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Invalid hash"
                      ]
                    },
                    {
                      "name": "NoProposal",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "No external proposal"
                      ]
                    },
                    {
                      "name": "AlreadyVetoed",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Identity may not veto a proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicatePreimage",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "Preimage already noted"
                      ]
                    },
                    {
                      "name": "NotImminent",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "Not imminent"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Too early"
                      ]
                    },
                    {
                      "name": "Imminent",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "Imminent"
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "Preimage not found"
                      ]
                    },
                    {
                      "name": "ReferendumInvalid",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Vote given for invalid referendum"
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Invalid preimage"
                      ]
                    },
                    {
                      "name": "NoneWaiting",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "No proposals waiting"
                      ]
                    },
                    {
                      "name": "NotVoter",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "The given account did not vote on the referendum."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 18,
                      "docs": [
                        "The actor has no permission to conduct the action."
                      ]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "fields": [],
                      "index": 19,
                      "docs": [
                        "The account is already delegating."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "fields": [],
                      "index": 20,
                      "docs": [
                        "Too high a balance was provided that the account cannot afford."
                      ]
                    },
                    {
                      "name": "NotDelegating",
                      "fields": [],
                      "index": 21,
                      "docs": [
                        "The account is not currently delegating."
                      ]
                    },
                    {
                      "name": "VotesExist",
                      "fields": [],
                      "index": 22,
                      "docs": [
                        "The account currently has votes attached to it and the operation cannot succeed until",
                        "these are removed, either through `unvote` or `reap_vote`."
                      ]
                    },
                    {
                      "name": "InstantNotAllowed",
                      "fields": [],
                      "index": 23,
                      "docs": [
                        "The instant referendum origin is currently disallowed."
                      ]
                    },
                    {
                      "name": "Nonsense",
                      "fields": [],
                      "index": 24,
                      "docs": [
                        "Delegation to oneself makes no sense."
                      ]
                    },
                    {
                      "name": "WrongUpperBound",
                      "fields": [],
                      "index": 25,
                      "docs": [
                        "Invalid upper bound."
                      ]
                    },
                    {
                      "name": "MaxVotesReached",
                      "fields": [],
                      "index": 26,
                      "docs": [
                        "Maximum number of votes reached."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [],
                      "index": 27,
                      "docs": [
                        "Maximum number of proposals reached."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 178,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 179,
            "type": {
              "path": [
                "spiritnet_runtime",
                "Call"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 72,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "name": null,
                          "type": 91,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Indices",
                      "fields": [
                        {
                          "name": null,
                          "type": 94,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 104,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Authorship",
                      "fields": [
                        {
                          "name": null,
                          "type": 117,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "ParachainStaking",
                      "fields": [
                        {
                          "name": null,
                          "type": 143,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainStaking, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "name": null,
                          "type": 153,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "AuraExt",
                      "fields": [
                        {
                          "name": null,
                          "type": 158,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AuraExt, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "name": null,
                          "type": 175,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "name": null,
                          "type": 180,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "name": null,
                          "type": 181,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "TechnicalMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 182,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 183,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": []
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": 184,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": []
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "name": null,
                          "type": 192,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 41,
                      "docs": []
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 194,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 42,
                      "docs": []
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": 197,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 43,
                      "docs": []
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "name": null,
                          "type": 199,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 44,
                      "docs": []
                    },
                    {
                      "name": "KiltLaunch",
                      "fields": [
                        {
                          "name": null,
                          "type": 200,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<KiltLaunch, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": []
                    },
                    {
                      "name": "Ctype",
                      "fields": [
                        {
                          "name": null,
                          "type": 202,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ctype, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": []
                    },
                    {
                      "name": "Attestation",
                      "fields": [
                        {
                          "name": null,
                          "type": 203,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Attestation, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 62,
                      "docs": []
                    },
                    {
                      "name": "Delegation",
                      "fields": [
                        {
                          "name": null,
                          "type": 204,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Delegation, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 63,
                      "docs": []
                    },
                    {
                      "name": "Did",
                      "fields": [
                        {
                          "name": null,
                          "type": 211,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Did, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 64,
                      "docs": []
                    },
                    {
                      "name": "DidLookup",
                      "fields": [
                        {
                          "name": null,
                          "type": 232,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DidLookup, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 67,
                      "docs": []
                    },
                    {
                      "name": "Web3Names",
                      "fields": [
                        {
                          "name": null,
                          "type": 234,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Web3Names, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 68,
                      "docs": []
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "name": null,
                          "type": 235,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 33,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "prime",
                          "type": 116,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "old_count",
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 179,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 70,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 70,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "proposal",
                          "type": 179,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 70,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 70,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "approve",
                          "type": 40,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 70,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 92,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 70,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 33,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "prime",
                          "type": 116,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "old_count",
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 179,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 70,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 70,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "proposal",
                          "type": 179,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 70,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 70,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "approve",
                          "type": 40,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 70,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 92,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 70,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a member `who` to the set.",
                        "",
                        "May only be called from `T::AddOrigin`."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a member `who` from the set.",
                        "",
                        "May only be called from `T::RemoveOrigin`."
                      ]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 33,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Remove the prime member if it exists.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 183,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 108,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `ProposalCount`, `origin account`",
                        "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 70,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `Proposals`, `rejected proposer account`",
                        "- DbWrites: `Proposals`, `rejected proposer account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 70,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1).",
                        "- DbReads: `Proposals`, `Approvals`",
                        "- DbWrite: `Approvals`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 185,
                          "typeName": "Vec<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 52,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 179,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 185,
                          "typeName": "Vec<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 186,
                          "typeName": "Box<T::PalletsOrigin>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 179,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 185,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 179
                }
              },
              "docs": []
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "spiritnet_runtime",
                "OriginCaller"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "name": null,
                          "type": 187,
                          "typeName": "frame_system::Origin<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "name": null,
                          "type": 188,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "name": null,
                          "type": 189,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Did",
                      "fields": [
                        {
                          "name": null,
                          "type": 190,
                          "typeName": "did::Origin<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 64,
                      "docs": []
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "name": null,
                          "type": 191,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 187,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "None",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "_Phantom",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "_Phantom",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "did",
                "origin",
                "DidRawOrigin"
              ],
              "params": [
                {
                  "name": "DidIdentifier",
                  "type": 0
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "DidIdentifier",
                      "docs": []
                    },
                    {
                      "name": "submitter",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vest",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Unlock any vested funds of the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 2 Reads, 2 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, [Sender Account]",
                        "    - Writes: Vesting Storage, Balances Locks, [Sender Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vest_other",
                      "fields": [
                        {
                          "name": "target",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Unlock any vested funds of a `target` account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 3 Reads, 3 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vested_transfer",
                      "fields": [
                        {
                          "name": "target",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "schedule",
                          "type": 193,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account receiving the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 3 Reads, 3 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_vested_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "schedule",
                          "type": 193,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The account whose funds should be transferred.",
                        "- `target`: The account that should be transferred the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 4 Reads, 4 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "merge_schedules",
                      "fields": [
                        {
                          "name": "schedule1_index",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "schedule2_index",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                        "the highest possible start and end blocks. If both schedules have already started the",
                        "current block will be used as the schedule start; with the caveat that if one schedule",
                        "is finished by the current block, the other will be treated as the new merged schedule,",
                        "unmodified.",
                        "",
                        "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                        "NOTE: This will unlock all schedules through the current block prior to merging.",
                        "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                        "and both will be removed.",
                        "",
                        "Merged schedule attributes:",
                        "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                        "  current_block)`.",
                        "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                        "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `schedule1_index`: index of the first schedule to merge.",
                        "- `schedule2_index`: index of the second schedule to merge."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "pallet_vesting",
                "vesting_info",
                "VestingInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "locked",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "per_block",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "starting_block",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 195,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 196,
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 195,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 196,
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task."
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 195,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 196,
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 195,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 196,
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 47
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 47,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "MaybeHashed"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 179
                },
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Value",
                      "fields": [
                        {
                          "name": null,
                          "type": 179,
                          "typeName": "T",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Hash",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "Hash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "proxy",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 198,
                          "typeName": "Option<T::ProxyType>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 179,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorised for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 51,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register a proxy account for the sender that is able to make calls on its behalf.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to make a proxy.",
                        "- `proxy_type`: The permissions allowed for this proxy account.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 51,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unregister a proxy account for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                        "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxies",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Unregister all proxy accounts for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                        "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "anonymous",
                      "fields": [
                        {
                          "name": "proxy_type",
                          "type": 51,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 52,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                        "initialize it with a proxy of `proxy_type` for `origin` sender.",
                        "",
                        "Requires a `Signed` origin.",
                        "",
                        "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                        "new account. This will almost always be the most permissive `ProxyType` possible to",
                        "allow for maximum flexibility.",
                        "- `index`: A disambiguation index, in case this is called multiple times in the same",
                        "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                        "want to use `0`.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "Fails with `Duplicate` if this has already been called in this transaction, from the",
                        "same sender, with the same parameters.",
                        "",
                        "Fails if there are insufficient funds to pay for deposit.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>",
                        "TODO: Might be over counting 1 read"
                      ]
                    },
                    {
                      "name": "kill_anonymous",
                      "fields": [
                        {
                          "name": "spawner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 51,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 52,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "height",
                          "type": 92,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "ext_index",
                          "type": 70,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Removes a previously spawned anonymous proxy.",
                        "",
                        "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                        "inaccessible.",
                        "",
                        "Requires a `Signed` origin, and the sender account must have been created by a call to",
                        "`anonymous` with corresponding parameters.",
                        "",
                        "- `spawner`: The account that originally called `anonymous` to create this account.",
                        "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                        "- `proxy_type`: The proxy type originally passed to `anonymous`.",
                        "- `height`: The height of the chain when the call to `anonymous` was processed.",
                        "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                        "",
                        "Fails with `NoPermission` in case the caller is not a previously created anonymous",
                        "account whose `anonymous` call has corresponding parameters.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "announce",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Publish the hash of a proxy-call that will be made in the future.",
                        "",
                        "This must be called some number of blocks before the corresponding `proxy` is attempted",
                        "if the delay associated with the proxy relationship is greater than zero.",
                        "",
                        "No more than `MaxPending` announcements may be made at any one time.",
                        "",
                        "This will take a deposit of `AnnouncementDepositFactor` as well as",
                        "`AnnouncementDepositBase` if there are no other pending announcements.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_announcement",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove a given announcement.",
                        "",
                        "May be called by a proxy account to remove a call they previously announced and return",
                        "the deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_announcement",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove the given announcement of a delegate.",
                        "",
                        "May be called by a target (proxied) account to remove a call that one of their delegates",
                        "(`delegate`) has announced they want to execute. The deposit is returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `delegate`: The account that previously announced the call.",
                        "- `call_hash`: The hash of the call to be made.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "proxy_announced",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 198,
                          "typeName": "Option<T::ProxyType>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 179,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorized for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 51
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 51,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "bytes",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register a preimage on-chain.",
                        "",
                        "If the preimage was previously requested, no fees or deposits are taken for providing",
                        "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                      ]
                    },
                    {
                      "name": "unnote_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Clear an unrequested preimage from the runtime storage."
                      ]
                    },
                    {
                      "name": "request_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                        "",
                        "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                        "a user may have paid, and take the control of the preimage out of their hands."
                      ]
                    },
                    {
                      "name": "unrequest_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Clear a previously made request for a preimage.",
                        "",
                        "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "kilt_launch",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "force_unlock",
                      "fields": [
                        {
                          "name": "block",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Forcedly remove KILT balance locks via sudo for the specified block",
                        "number.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "Emits `Unlocked`.",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is proportional to the size of",
                        "  storage entries in `UnlockingAt` (N) which is practically uncapped",
                        "  but in theory it should be `MaxClaims` at most.",
                        "---------",
                        "Weight: O(N) where N is the number of accounts for which the lock",
                        "will be removed for the given block.",
                        "- Reads: UnlockingAt, [Origin Account]",
                        "- Kills: UnlockingAt (if N > 0), Locks (if N > 0), BalanceLocks (if",
                        "  N > 0)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "change_transfer_account",
                      "fields": [
                        {
                          "name": "transfer_account",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Forcedly change the transfer account to the specified account.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account]",
                        "- Writes: TransferAccount",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "migrate_genesis_account",
                      "fields": [
                        {
                          "name": "source",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer tokens and vesting information or the KILT balance lock",
                        "from an unowned source address to an account owned by the target.",
                        "",
                        "If vesting info or a KILT balance lock has been set up for the",
                        "source account in the genesis block via `GenesisBuild`, then",
                        "the corresponding locked/vested information and balance is migrated",
                        "automatically. Please note that even though this extrinsic supports",
                        "migrating both the KILT balance lock as well as vesting in one call,",
                        "all source accounts should only contain either a KILT balance lock",
                        "or vesting.",
                        "",
                        "Additionally, for vesting we already unlock the",
                        "usable balance until the current block. This should enable the user",
                        "to pay the transaction fees for the next call of `vest` which is",
                        "always required to be explicitly called in order to unlock (more)",
                        "balance from vesting.",
                        "",
                        "NOTE: Setting the KILT balance lock actually only occurs in this",
                        "call (and not when building the genesis block in `GenesisBuild`) to",
                        "avoid overhead from handling locks when migrating. We can do so",
                        "because all target accounts are not owned by anyone and thus these",
                        "cannot sign and/or call any extrinsics.",
                        "",
                        "The dispatch origin must be TransferAccount.",
                        "",
                        "Emits either `AddedVesting` or `AddedKiltLock`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], TransferAccount, Locks, Balance, Vesting,",
                        "  BalanceLocks",
                        "- Writes: Locks, Balance, UnownedAccount, Vesting (if source is",
                        "  vesting), BalanceLocks (if source is locking), UnlockingAt (if",
                        "  source is locking)",
                        "- Kills (for source): Locks, Balance, UnownedAccount, Vesting (if",
                        "  source is vesting), BalanceLocks (if source is locking)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "migrate_multiple_genesis_accounts",
                      "fields": [
                        {
                          "name": "sources",
                          "type": 201,
                          "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Transfer all balances, vesting information and KILT balance locks",
                        "from multiple source addresses to the same target address.",
                        "",
                        "See `migrate_genesis_account` for details as we run the same logic",
                        "for each source address.",
                        "",
                        "The dispatch origin must be TransferAccount.",
                        "",
                        "Emits N events which are either `AddedVesting` or `AddedKiltLock`.",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is proportional to the size of",
                        "  `sources` (N) which is capped at CompactAssignments::LIMIT",
                        "  (MaxClaims)",
                        "---------",
                        "Weight: O(N) where N is the number of source addresses.",
                        "- Reads: [Origin Account], TransferAccount, UnownedAccount, Locks,",
                        "  Balance, Vesting, BalanceLocks",
                        "- Writes: Locks, Balance, Vesting (if any source is vesting),",
                        "  BalanceLocks (if aby source is locking), UnlockingAt (if any",
                        "  source is locking)",
                        "- Kills (for sources): Locks, Balance, UnownedAccount, Vesting (if",
                        "  any source is vesting), BalanceLocks (if any source is locking)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "locked_transfer",
                      "fields": [
                        {
                          "name": "target",
                          "type": 105,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "<T as pallet_balances::Config>::Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer KILT locked tokens to another account similar to",
                        "`pallet_vesting::vested_transfer`.",
                        "",
                        "Expects the source to have a KILT balance lock and at least the",
                        "specified amount available as balance locked with LockId",
                        "`KILT_LAUNCH_ID`.",
                        "",
                        "Calls `migrate_kilt_balance_lock` internally.",
                        "",
                        "Emits `LockedTransfer` and if target does not have KILT balance",
                        "lockup prior to transfer `AddedKiltLock`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Locks, Balance, BalanceLocks, UnlockingAt",
                        "- Writes: Locks, Balance, BalanceLocks, UnlockingAt",
                        "- Kills (if source transfers all locked balance): Locks,",
                        "  BalanceLocks, UnlockingAt",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 201,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 105
                }
              },
              "docs": []
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "ctype",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add",
                      "fields": [
                        {
                          "name": "ctype",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new CType from the given unique CType hash and associates",
                        "it with its creator.",
                        "",
                        "A CType with the same hash must not be stored on chain.",
                        "",
                        "Emits `CTypeCreated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: Ctypes, Balance",
                        "- Writes: Ctypes, Balance",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "attestation",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add",
                      "fields": [
                        {
                          "name": "claim_hash",
                          "type": 9,
                          "typeName": "ClaimHashOf<T>",
                          "docs": []
                        },
                        {
                          "name": "ctype_hash",
                          "type": 9,
                          "typeName": "CtypeHashOf<T>",
                          "docs": []
                        },
                        {
                          "name": "delegation_id",
                          "type": 57,
                          "typeName": "Option<DelegationNodeIdOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new attestation.",
                        "",
                        "The attester can optionally provide a reference to an existing",
                        "delegation that will be saved along with the attestation itself in",
                        "the form of an attested delegation.",
                        "",
                        "The referenced CType hash must already be present on chain.",
                        "",
                        "If an optional delegation id is provided, the dispatch origin must",
                        "be the owner of the delegation. Otherwise, it could be any",
                        "`DelegationEntityId`.",
                        "",
                        "Emits `AttestationCreated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Ctype, Attestations",
                        "- Reads if delegation id is provided: Delegations, Roots,",
                        "  DelegatedAttestations",
                        "- Writes: Attestations, (DelegatedAttestations)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "revoke",
                      "fields": [
                        {
                          "name": "claim_hash",
                          "type": 9,
                          "typeName": "ClaimHashOf<T>",
                          "docs": []
                        },
                        {
                          "name": "max_parent_checks",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Revoke an existing attestation.",
                        "",
                        "The revoker must be either the creator of the attestation being",
                        "revoked or an entity that in the delegation tree is an ancestor of",
                        "the attester, i.e., it was either the delegator of the attester or",
                        "an ancestor thereof.",
                        "",
                        "Emits `AttestationRevoked`.",
                        "",
                        "# <weight>",
                        "Weight: O(P) where P is the number of steps required to verify that",
                        "the dispatch Origin controls the delegation entitled to revoke the",
                        "attestation. It is bounded by `max_parent_checks`.",
                        "- Reads: [Origin Account], Attestations, delegation::Roots",
                        "- Reads per delegation step P: delegation::Delegations",
                        "- Writes: Attestations, DelegatedAttestations",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove",
                      "fields": [
                        {
                          "name": "claim_hash",
                          "type": 9,
                          "typeName": "ClaimHashOf<T>",
                          "docs": []
                        },
                        {
                          "name": "max_parent_checks",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Remove an attestation.",
                        "",
                        "The origin must be either the creator of the attestation or an",
                        "entity which is an ancestor of the attester in the delegation tree,",
                        "i.e., it was either the delegator of the attester or an ancestor",
                        "thereof.",
                        "",
                        "Emits `AttestationRemoved`.",
                        "",
                        "# <weight>",
                        "Weight: O(P) where P is the number of steps required to verify that",
                        "the dispatch Origin controls the delegation entitled to revoke the",
                        "attestation. It is bounded by `max_parent_checks`.",
                        "- Reads: [Origin Account], Attestations, delegation::Roots",
                        "- Reads per delegation step P: delegation::Delegations",
                        "- Writes: Attestations, DelegatedAttestations",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reclaim_deposit",
                      "fields": [
                        {
                          "name": "claim_hash",
                          "type": 9,
                          "typeName": "ClaimHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Reclaim a storage deposit by removing an attestation",
                        "",
                        "Emits `DepositReclaimed`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Attestations, DelegatedAttestations",
                        "- Writes: Attestations, DelegatedAttestations",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "delegation",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_hierarchy",
                      "fields": [
                        {
                          "name": "root_node_id",
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "ctype_hash",
                          "type": 9,
                          "typeName": "CtypeHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new delegation root associated with a given CType hash.",
                        "",
                        "The new root will allow a new trust hierarchy to be created by",
                        "adding children delegations to the root.",
                        "",
                        "There must be no delegation with the same ID stored on chain, while",
                        "there must be already a CType with the given hash stored in the",
                        "CType pallet.",
                        "",
                        "The dispatch origin must be split into",
                        "* a submitter of type `AccountId` who is responsible for paying the",
                        "  transaction fee and",
                        "* a DID subject of type `DelegationEntityId` who creates, owns and",
                        "  can revoke the delegation.",
                        "",
                        "Requires the sender of the transaction to have a reservable balance",
                        "of at least `Deposit` many tokens.",
                        "",
                        "Emits `RootCreated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Roots, CTypes",
                        "- Writes: Roots",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_delegation",
                      "fields": [
                        {
                          "name": "delegation_id",
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "parent_id",
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "DelegatorIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "permissions",
                          "type": 59,
                          "typeName": "Permissions",
                          "docs": []
                        },
                        {
                          "name": "delegate_signature",
                          "type": 205,
                          "typeName": "DelegateSignatureTypeOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Create a new delegation node.",
                        "",
                        "The new delegation node represents a new trust hierarchy that",
                        "considers the new node as its root. The owner of this node has full",
                        "control over any of its direct and indirect descendants.",
                        "",
                        "For the creation to succeed, the delegatee must provide a valid",
                        "signature over the (blake256) hash of the creation operation details",
                        "which include (in order) delegation id, root node id, parent id, and",
                        "permissions of the new node.",
                        "",
                        "There must be no delegation with the same id stored on chain.",
                        "Furthermore, the referenced root and parent nodes must already be",
                        "present on chain and contain the valid permissions and revocation",
                        "status (i.e., not revoked).",
                        "",
                        "The dispatch origin must be split into",
                        "* a submitter of type `AccountId` who is responsible for paying the",
                        "  transaction fee and",
                        "* a DID subject of type `DelegationEntityId` who creates, owns and",
                        "  can revoke the delegation.",
                        "",
                        "Requires the sender of the transaction to have a reservable balance",
                        "of at least `Deposit` many tokens.",
                        "",
                        "Emits `DelegationCreated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Roots, Delegations",
                        "- Writes: Delegations",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "revoke_delegation",
                      "fields": [
                        {
                          "name": "delegation_id",
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "max_parent_checks",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_revocations",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Revoke a delegation node (potentially a root node) and all its",
                        "children.",
                        "",
                        "Does not refund the delegation back to the deposit owner as the",
                        "node is still stored on chain. Requires to additionally call",
                        "`remove_delegation` to unreserve the deposit.",
                        "",
                        "Revoking a delegation node results in the trust hierarchy starting",
                        "from the given node being revoked. Nevertheless, revocation starts",
                        "from the leave nodes upwards, so if the operation ends prematurely",
                        "because it runs out of gas, the delegation state would be consistent",
                        "as no child would \"survive\" its parent. As a consequence, if the",
                        "given node is revoked, the trust hierarchy with the node as root is",
                        "to be considered revoked.",
                        "",
                        "The dispatch origin must be split into",
                        "* a submitter of type `AccountId` who is responsible for paying the",
                        "  transaction fee and",
                        "* a DID subject of type `DelegationEntityId` who creates, owns and",
                        "  can revoke the delegation.",
                        "",
                        "Emits C * `DelegationRevoked`.",
                        "",
                        "# <weight>",
                        "Weight: O(C) where C is the number of children of the delegation",
                        "node which is bounded by `max_children`.",
                        "- Reads: [Origin Account], Roots, C * Delegations, C * Children.",
                        "- Writes: Roots, C * Delegations",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_delegation",
                      "fields": [
                        {
                          "name": "delegation_id",
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "max_removals",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Remove a delegation node (potentially a root node) and all its",
                        "children.",
                        "",
                        "Returns the delegation deposit to the deposit owner for each",
                        "removed DelegationNode by unreserving it.",
                        "",
                        "Removing a delegation node results in the trust hierarchy starting",
                        "from the given node being removed. Nevertheless, removal starts",
                        "from the leave nodes upwards, so if the operation ends prematurely",
                        "because it runs out of gas, the delegation state would be consistent",
                        "as no child would \"survive\" its parent. As a consequence, if the",
                        "given node is removed, the trust hierarchy with the node as root is",
                        "to be considered removed.",
                        "",
                        "The dispatch origin must be split into",
                        "* a submitter of type `AccountId` who is responsible for paying the",
                        "  transaction fee and",
                        "* a DID subject of type `DelegationEntityId` who creates, owns and",
                        "  can revoke the delegation.",
                        "",
                        "Emits C * `DelegationRemoved`.",
                        "",
                        "# <weight>",
                        "Weight: O(C) where C is the number of children of the delegation",
                        "node which is bounded by `max_children`.",
                        "- Reads: [Origin Account], Roots, C * Delegations, C * Children.",
                        "- Writes: Roots, 2 * C * Delegations",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reclaim_deposit",
                      "fields": [
                        {
                          "name": "delegation_id",
                          "type": 9,
                          "typeName": "DelegationNodeIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "max_removals",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Reclaim the deposit for a delegation node (potentially a root",
                        "node), removing the node and all its children.",
                        "",
                        "Returns the delegation deposit to the deposit owner for each",
                        "removed DelegationNode by unreserving it.",
                        "",
                        "Removing a delegation node results in the trust hierarchy starting",
                        "from the given node being removed. Nevertheless, removal starts",
                        "from the leave nodes upwards, so if the operation ends prematurely",
                        "because it runs out of gas, the delegation state would be consistent",
                        "as no child would \"survive\" its parent. As a consequence, if the",
                        "given node is removed, the trust hierarchy with the node as root is",
                        "to be considered removed.",
                        "",
                        "The dispatch origin must be signed by the delegation deposit owner.",
                        "",
                        "`DepositReclaimed`.",
                        "",
                        "# <weight>",
                        "Weight: O(C) where C is the number of children of the delegation",
                        "node which is bounded by `max_removals`.",
                        "- Reads: [Origin Account], Roots, C * Delegations, C * Children.",
                        "- Writes: Roots, 2 * C * Delegations",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "did",
                "did_details",
                "DidSignature"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 206,
                          "typeName": "ed25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 208,
                          "typeName": "sr25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 209,
                          "typeName": "ecdsa::Signature",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 207,
                      "typeName": "[u8; 64]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 207,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 207,
                      "typeName": "[u8; 64]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 210,
                      "typeName": "[u8; 65]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 210,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "did",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "details",
                          "type": 212,
                          "typeName": "Box<DidCreationDetails<T>>",
                          "docs": []
                        },
                        {
                          "name": "signature",
                          "type": 205,
                          "typeName": "DidSignature",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Store a new DID on chain, after verifying that the creation",
                        "operation has been signed by the KILT account associated with the",
                        "identifier of the DID being created and that a DID with the same",
                        "identifier has not previously existed on (and then deleted from) the",
                        "chain.",
                        "",
                        "There must be no DID information stored on chain under the same DID",
                        "identifier.",
                        "",
                        "The new keys added with this operation are stored under the DID",
                        "identifier along with the block number in which the operation was",
                        "executed.",
                        "",
                        "The dispatch origin can be any KILT account with enough funds to",
                        "execute the extrinsic and it does not have to be tied in any way to",
                        "the KILT account identifying the DID subject.",
                        "",
                        "Emits `DidCreated`.",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is mainly dependent on the number of",
                        "  new key agreement keys and the number of new service endpoints",
                        "  included in the operation.",
                        "---------",
                        "Weight: O(K) + O(N) where K is the number of new key agreement",
                        "keys bounded by `MaxNewKeyAgreementKeys`, while N is the number of",
                        "new service endpoints bounded by `MaxNumberOfServicesPerDid`.",
                        "- Reads: [Origin Account], Did, DidBlacklist",
                        "- Writes: Did (with K new key agreement keys), ServiceEndpoints",
                        "  (with N new service endpoints), DidEndpointsCount",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_authentication_key",
                      "fields": [
                        {
                          "name": "new_key",
                          "type": 218,
                          "typeName": "DidVerificationKey",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Update the DID authentication key.",
                        "",
                        "The old key is deleted from the set of public keys if it is",
                        "not used in any other part of the DID. The new key is added to the",
                        "set of public keys.",
                        "",
                        "The dispatch origin must be a DID origin proxied via the",
                        "`submit_did_call` extrinsic.",
                        "",
                        "Emits `DidUpdated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Did",
                        "- Writes: Did",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_delegation_key",
                      "fields": [
                        {
                          "name": "new_key",
                          "type": 218,
                          "typeName": "DidVerificationKey",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set or update the DID delegation key.",
                        "",
                        "If an old key existed, it is deleted from the set of public keys if",
                        "it is not used in any other part of the DID. The new key is added to",
                        "the set of public keys.",
                        "",
                        "The dispatch origin must be a DID origin proxied via the",
                        "`submit_did_call` extrinsic.",
                        "",
                        "Emits `DidUpdated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Did",
                        "- Writes: Did",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_delegation_key",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Remove the DID delegation key.",
                        "",
                        "The old key is deleted from the set of public keys if",
                        "it is not used in any other part of the DID.",
                        "",
                        "The dispatch origin must be a DID origin proxied via the",
                        "`submit_did_call` extrinsic.",
                        "",
                        "Emits `DidUpdated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Did",
                        "- Writes: Did",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_attestation_key",
                      "fields": [
                        {
                          "name": "new_key",
                          "type": 218,
                          "typeName": "DidVerificationKey",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set or update the DID attestation key.",
                        "",
                        "If an old key existed, it is deleted from the set of public keys if",
                        "it is not used in any other part of the DID. The new key is added to",
                        "the set of public keys.",
                        "",
                        "The dispatch origin must be a DID origin proxied via the",
                        "`submit_did_call` extrinsic.",
                        "",
                        "Emits `DidUpdated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Did",
                        "- Writes: Did",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_attestation_key",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Remove the DID attestation key.",
                        "",
                        "The old key is deleted from the set of public keys if",
                        "it is not used in any other part of the DID.",
                        "",
                        "The dispatch origin must be a DID origin proxied via the",
                        "`submit_did_call` extrinsic.",
                        "",
                        "Emits `DidUpdated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Did",
                        "- Writes: Did",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_key_agreement_key",
                      "fields": [
                        {
                          "name": "new_key",
                          "type": 214,
                          "typeName": "DidEncryptionKey",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Add a single new key agreement key to the DID.",
                        "",
                        "The new key is added to the set of public keys.",
                        "",
                        "The dispatch origin must be a DID origin proxied via the",
                        "`submit_did_call` extrinsic.",
                        "",
                        "Emits `DidUpdated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Did",
                        "- Writes: Did",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_key_agreement_key",
                      "fields": [
                        {
                          "name": "key_id",
                          "type": 9,
                          "typeName": "KeyIdOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove a DID key agreement key from both its set of key agreement",
                        "keys and as well as its public keys.",
                        "",
                        "The dispatch origin must be a DID origin proxied via the",
                        "`submit_did_call` extrinsic.",
                        "",
                        "Emits `DidUpdated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Did",
                        "- Writes: Did",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_service_endpoint",
                      "fields": [
                        {
                          "name": "service_endpoint",
                          "type": 223,
                          "typeName": "DidEndpoint<T>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Add a new service endpoint under the given DID.",
                        "",
                        "The dispatch origin must be a DID origin proxied via the",
                        "`submit_did_call` extrinsic.",
                        "",
                        "Emits `DidUpdated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Did, ServiceEndpoints, DidEndpointsCount",
                        "- Writes: Did, ServiceEndpoints, DidEndpointsCount",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_service_endpoint",
                      "fields": [
                        {
                          "name": "service_id",
                          "type": 224,
                          "typeName": "ServiceEndpointId<T>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove the service with the provided ID from the DID.",
                        "",
                        "The dispatch origin must be a DID origin proxied via the",
                        "`submit_did_call` extrinsic.",
                        "",
                        "Emits `DidUpdated`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], ServiceEndpoints, DidEndpointsCount",
                        "- Writes: Did, ServiceEndpoints, DidEndpointsCount",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "delete",
                      "fields": [
                        {
                          "name": "endpoints_to_remove",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Delete a DID from the chain and all information associated with it,",
                        "after verifying that the delete operation has been signed by the DID",
                        "subject using the authentication key currently stored on chain.",
                        "",
                        "The referenced DID identifier must be present on chain before the",
                        "delete operation is evaluated.",
                        "",
                        "After it is deleted, a DID with the same identifier cannot be",
                        "re-created ever again.",
                        "",
                        "As the result of the deletion, all traces of the DID are removed",
                        "from the storage, which results in the invalidation of all",
                        "attestations issued by the DID subject.",
                        "",
                        "The dispatch origin must be a DID origin proxied via the",
                        "`submit_did_call` extrinsic.",
                        "",
                        "Emits `DidDeleted`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Did",
                        "- Kills: Did entry associated to the DID identifier",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reclaim_deposit",
                      "fields": [
                        {
                          "name": "did_subject",
                          "type": 0,
                          "typeName": "DidIdentifierOf<T>",
                          "docs": []
                        },
                        {
                          "name": "endpoints_to_remove",
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Reclaim a deposit for a DID. This will delete the DID and all",
                        "information associated with it, after verifying that the caller is",
                        "the owner of the deposit.",
                        "",
                        "The referenced DID identifier must be present on chain before the",
                        "delete operation is evaluated.",
                        "",
                        "After it is deleted, a DID with the same identifier cannot be",
                        "re-created ever again.",
                        "",
                        "As the result of the deletion, all traces of the DID are removed",
                        "from the storage, which results in the invalidation of all",
                        "attestations issued by the DID subject.",
                        "",
                        "Emits `DidDeleted`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Did",
                        "- Kills: Did entry associated to the DID identifier",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "submit_did_call",
                      "fields": [
                        {
                          "name": "did_call",
                          "type": 231,
                          "typeName": "Box<DidAuthorizedCallOperation<T>>",
                          "docs": []
                        },
                        {
                          "name": "signature",
                          "type": 205,
                          "typeName": "DidSignature",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Proxy a dispatchable call of another runtime extrinsic that",
                        "supports a DID origin.",
                        "",
                        "The referenced DID identifier must be present on chain before the",
                        "operation is dispatched.",
                        "",
                        "A call submitted through this extrinsic must be signed with the",
                        "right DID key, depending on the call. This information is provided",
                        "by the `DidAuthorizedCallOperation` parameter, which specifies the",
                        "DID subject acting as the origin of the call, the DID's tx counter",
                        "(nonce), the dispatchable to call in case signature verification",
                        "succeeds, the type of DID key to use to verify the operation",
                        "signature, and the block number the operation was targeting for",
                        "inclusion, when it was created and signed.",
                        "",
                        "In case the signature is incorrect, the nonce is not valid, the",
                        "required key is not present for the specified DID, or the block",
                        "specified is too old the verification fails and the call is not",
                        "dispatched. Otherwise, the call is properly dispatched with a",
                        "`DidOrigin` origin indicating the DID subject.",
                        "",
                        "A successful dispatch operation results in the tx counter associated",
                        "with the given DID to be incremented, to mitigate replay attacks.",
                        "",
                        "The dispatch origin can be any KILT account with enough funds to",
                        "execute the extrinsic and it does not have to be tied in any way to",
                        "the KILT account identifying the DID subject.",
                        "",
                        "Emits `DidCallDispatched`.",
                        "",
                        "# <weight>",
                        "Weight: O(1) + weight of the dispatched call",
                        "- Reads: [Origin Account], Did",
                        "- Writes: Did",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "did",
                "did_details",
                "DidCreationDetails"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "did",
                      "type": 0,
                      "typeName": "DidIdentifierOf<T>",
                      "docs": []
                    },
                    {
                      "name": "submitter",
                      "type": 0,
                      "typeName": "AccountIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": "new_key_agreement_keys",
                      "type": 213,
                      "typeName": "DidNewKeyAgreementKeySet<T>",
                      "docs": []
                    },
                    {
                      "name": "new_attestation_key",
                      "type": 217,
                      "typeName": "Option<DidVerificationKey>",
                      "docs": []
                    },
                    {
                      "name": "new_delegation_key",
                      "type": 217,
                      "typeName": "Option<DidVerificationKey>",
                      "docs": []
                    },
                    {
                      "name": "new_service_details",
                      "type": 222,
                      "typeName": "Vec<DidEndpoint<T>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 213,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_btree_set",
                "BoundedBTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 214
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 215,
                      "typeName": "BTreeSet<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "did",
                "did_details",
                "DidEncryptionKey"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "X25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 215,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 214
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 216,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 216,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 214
                }
              },
              "docs": []
            }
          },
          {
            "id": 217,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 218
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 218,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "did",
                "did_details",
                "DidVerificationKey"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 219,
                          "typeName": "ed25519::Public",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 149,
                          "typeName": "sr25519::Public",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 220,
                          "typeName": "ecdsa::Public",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 221,
                      "typeName": "[u8; 33]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 221,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 33,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 222,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 223
                }
              },
              "docs": []
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "did",
                "service_endpoints",
                "DidEndpoint"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 224,
                      "typeName": "ServiceEndpointId<T>",
                      "docs": []
                    },
                    {
                      "name": "service_types",
                      "type": 225,
                      "typeName": "ServiceEndpointTypeEntries<T>",
                      "docs": []
                    },
                    {
                      "name": "urls",
                      "type": 228,
                      "typeName": "ServiceEndpointUrlEntries<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 226
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 227,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 227,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 226
                }
              },
              "docs": []
            }
          },
          {
            "id": 228,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 229
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 230,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 229,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 230,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 229
                }
              },
              "docs": []
            }
          },
          {
            "id": 231,
            "type": {
              "path": [
                "did",
                "did_details",
                "DidAuthorizedCallOperation"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "did",
                      "type": 0,
                      "typeName": "DidIdentifierOf<T>",
                      "docs": []
                    },
                    {
                      "name": "tx_counter",
                      "type": 4,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 179,
                      "typeName": "DidCallableOf<T>",
                      "docs": []
                    },
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "BlockNumberOf<T>",
                      "docs": []
                    },
                    {
                      "name": "submitter",
                      "type": 0,
                      "typeName": "AccountIdOf<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 232,
            "type": {
              "path": [
                "pallet_did_lookup",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "associate_account",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "expiration",
                          "type": 4,
                          "typeName": "<T as frame_system::Config>::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "proof",
                          "type": 233,
                          "typeName": "SignatureOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Associate the given account to the DID that authorized this call.",
                        "",
                        "The account has to sign the DID and a blocknumber after which the",
                        "signature expires in order to authorize the association.",
                        "",
                        "The signature will be checked against the scale encoded tuple of the",
                        "method specific id of the did identifier and the block number after",
                        "which the signature should be regarded invalid.",
                        "",
                        "Emits `AssociationEstablished` and, optionally, `AssociationRemoved`",
                        "if there was a previous association for the account.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: ConnectedDids + ConnectedAccounts + DID Origin Check",
                        "- Writes: ConnectedDids + ConnectedAccounts",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "associate_sender",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Associate the sender of the call to the DID that authorized this",
                        "call.",
                        "",
                        "Emits `AssociationEstablished` and, optionally, `AssociationRemoved`",
                        "if there was a previous association for the account.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: ConnectedDids + ConnectedAccounts + DID Origin Check",
                        "- Writes: ConnectedDids + ConnectedAccounts",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_sender_association",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Remove the association of the sender account. This call doesn't",
                        "require the authorization of the DID, but requires a signed origin.",
                        "",
                        "Emits `AssociationRemoved`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: ConnectedDids + ConnectedAccounts + DID Origin Check",
                        "- Writes: ConnectedDids + ConnectedAccounts",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_account_association",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Remove the association of the provided account ID. This call doesn't",
                        "require the authorization of the account ID, but the associated DID",
                        "needs to match the DID that authorized this call.",
                        "",
                        "Emits `AssociationRemoved`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: ConnectedDids + ConnectedAccounts + DID Origin Check",
                        "- Writes: ConnectedDids + ConnectedAccounts",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reclaim_deposit",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove the association of the provided account. This call can only",
                        "be called from the deposit owner. The reserved deposit will be",
                        "freed.",
                        "",
                        "Emits `AssociationRemoved`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: ConnectedDids",
                        "- Writes: ConnectedDids",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 233,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 206,
                          "typeName": "ed25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 208,
                          "typeName": "sr25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 209,
                          "typeName": "ecdsa::Signature",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "pallet_web3_names",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "claim",
                      "fields": [
                        {
                          "name": "name",
                          "type": 64,
                          "typeName": "Web3NameInput<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Assign the specified name to the owner as specified in the",
                        "origin.",
                        "",
                        "The name must not have already been claimed by someone else and the",
                        "owner must not already own another name.",
                        "",
                        "Emits `Web3NameClaimed` if the operation is carried out",
                        "successfully.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: Names, Owner, Banned storage entries + available currency",
                        "  check + origin check",
                        "- Writes: Names, Owner storage entries + currency deposit reserve",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "release_by_owner",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Release the provided name from its owner.",
                        "",
                        "The origin must be the owner of the specified name.",
                        "",
                        "Emits `Web3NameReleased` if the operation is carried out",
                        "successfully.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: Names storage entry + origin check",
                        "- Writes: Names, Owner storage entries + currency deposit release",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reclaim_deposit",
                      "fields": [
                        {
                          "name": "name",
                          "type": 64,
                          "typeName": "Web3NameInput<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Release the provided name from its owner.",
                        "",
                        "The origin must be the account that paid for the name's deposit.",
                        "",
                        "Emits `Web3NameReleased` if the operation is carried out",
                        "successfully.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: Owner storage entry + origin check",
                        "- Writes: Names, Owner storage entries + currency deposit release",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "ban",
                      "fields": [
                        {
                          "name": "name",
                          "type": 64,
                          "typeName": "Web3NameInput<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Ban a name.",
                        "",
                        "A banned name cannot be claimed by anyone. The name's deposit",
                        "is returned to the original payer.",
                        "",
                        "The origin must be the ban origin.",
                        "",
                        "Emits `Web3NameBanned` if the operation is carried out",
                        "successfully.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: Banned, Owner, Names storage entries + origin check",
                        "- Writes: Names, Owner, Banned storage entries + currency deposit",
                        "  release",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unban",
                      "fields": [
                        {
                          "name": "name",
                          "type": 64,
                          "typeName": "Web3NameInput<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Unban a name.",
                        "",
                        "Make a name claimable again.",
                        "",
                        "The origin must be the ban origin.",
                        "",
                        "Emits `Web3NameUnbanned` if the operation is carried out",
                        "successfully.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: Banned storage entry + origin check",
                        "- Writes: Banned storage entry deposit release",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_validation_data",
                      "fields": [
                        {
                          "name": "data",
                          "type": 236,
                          "typeName": "ParachainInherentData",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current validation data.",
                        "",
                        "This should be invoked exactly once per block. It will panic at the finalization",
                        "phase if the call was not invoked.",
                        "",
                        "The dispatch origin for this call must be `Inherent`",
                        "",
                        "As a side effect, this function upgrades the current validation function",
                        "if the appropriate time has come."
                      ]
                    },
                    {
                      "name": "sudo_send_upward_message",
                      "fields": [
                        {
                          "name": "message",
                          "type": 10,
                          "typeName": "UpwardMessage",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "enact_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "ParachainInherentData"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validation_data",
                      "type": 237,
                      "typeName": "PersistedValidationData",
                      "docs": []
                    },
                    {
                      "name": "relay_chain_state",
                      "type": 239,
                      "typeName": "sp_trie::StorageProof",
                      "docs": []
                    },
                    {
                      "name": "downward_messages",
                      "type": 240,
                      "typeName": "Vec<InboundDownwardMessage>",
                      "docs": []
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 242,
                      "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 237,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "PersistedValidationData"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 7
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_head",
                      "type": 238,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 7,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "relay_parent_storage_root",
                      "type": 9,
                      "typeName": "H",
                      "docs": []
                    },
                    {
                      "name": "max_pov_size",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "HeadData"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "sp_trie",
                "storage_proof",
                "StorageProof"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_nodes",
                      "type": 76,
                      "typeName": "Vec<Vec<u8>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 240,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 241
                }
              },
              "docs": []
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundDownwardMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 7
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 7,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "msg",
                      "type": 10,
                      "typeName": "DownwardMessage",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 243
                },
                {
                  "name": "V",
                  "type": 244
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 246,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 243,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "Id"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 244,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 245
                }
              },
              "docs": []
            }
          },
          {
            "id": 245,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 7
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 7,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "sp_std::vec::Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 246,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 247
                }
              },
              "docs": []
            }
          },
          {
            "id": 247,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  243,
                  244
                ]
              },
              "docs": []
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "pallet_collective",
                "Votes"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 7,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 7,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "ayes",
                      "type": 33,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "nays",
                      "type": 33,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 250,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 251,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Not a member."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 253,
            "type": {
              "path": [
                "pallet_treasury",
                "Proposal"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 254,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 7
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 150,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 257,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 88,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 258,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 259,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 193
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 261,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 261,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 193
                }
              },
              "docs": []
            }
          },
          {
            "id": 262,
            "type": {
              "path": [
                "pallet_vesting",
                "Releases"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 263,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotVesting",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The account given is not vesting."
                      ]
                    },
                    {
                      "name": "AtMaxVestingSchedules",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The account already has `MaxVestingSchedules` count of schedules and thus",
                        "cannot add another one. Consider merging existing schedules in order to add another."
                      ]
                    },
                    {
                      "name": "AmountLow",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Amount being transferred is too low to create a vesting schedule."
                      ]
                    },
                    {
                      "name": "ScheduleIndexOutOfBounds",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "An index was out of bounds of the vesting schedules."
                      ]
                    },
                    {
                      "name": "InvalidScheduleParams",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Failed to create a new schedule because some parameter was invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the vesting pallet."
              ]
            }
          },
          {
            "id": 264,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 265
                }
              },
              "docs": []
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 266
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 266,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 266,
            "type": {
              "path": [
                "pallet_scheduler",
                "ScheduledV3"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": 196
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 186
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 48,
                      "typeName": "Option<Vec<u8>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 196,
                      "typeName": "Call",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 195,
                      "typeName": "Option<schedule::Period<BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "type": 186,
                      "typeName": "PalletsOrigin",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 267,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 268,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  269,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 269,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 270
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 271,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 270,
            "type": {
              "path": [
                "pallet_proxy",
                "ProxyDefinition"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ProxyType",
                  "type": 51
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 51,
                      "typeName": "ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 271,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 270
                }
              },
              "docs": []
            }
          },
          {
            "id": 272,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  273,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 273,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 274
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 275,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "pallet_proxy",
                "Announcement"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 9,
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 275,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 274
                }
              },
              "docs": []
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooMany",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "There are too many proxies registered or too many announcements pending."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Proxy registration not found."
                      ]
                    },
                    {
                      "name": "NotProxy",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Sender is not a proxy of the account to be proxied."
                      ]
                    },
                    {
                      "name": "Unproxyable",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "A call which is incompatible with the proxy type's filter was attempted."
                      ]
                    },
                    {
                      "name": "Duplicate",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Account is already a proxy."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Call may not be made by proxy because it may escalate its privileges."
                      ]
                    },
                    {
                      "name": "Unannounced",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Announcement, if made at all, was made too recently."
                      ]
                    },
                    {
                      "name": "NoSelfProxy",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Cannot add self as proxy."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 277,
            "type": {
              "path": [
                "pallet_preimage",
                "RequestStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unrequested",
                      "fields": [
                        {
                          "name": null,
                          "type": 278,
                          "typeName": "Option<(AccountId, Balance)>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": null,
                          "type": 7,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 279
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 279,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 279,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 280,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 281,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooLarge",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Preimage is too large to store on-chain."
                      ]
                    },
                    {
                      "name": "AlreadyNoted",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Preimage has already been noted on-chain."
                      ]
                    },
                    {
                      "name": "NotAuthorized",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The user is not authorized to perform this action."
                      ]
                    },
                    {
                      "name": "NotNoted",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The preimage cannot be removed since it has not yet been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "A preimage may not be removed when there are outstanding requests."
                      ]
                    },
                    {
                      "name": "NotRequested",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The preimage request cannot be removed since no outstanding requests exist."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 282,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 33,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 283,
            "type": {
              "path": [
                "kilt_launch",
                "pallet",
                "LockedBalance"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block",
                      "type": 4,
                      "typeName": "<T as frame_system::Config>::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "<T as pallet_balances::Config>::Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 284,
            "type": {
              "path": [
                "kilt_launch",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLockNotFound",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The source address does not have KILT balance lock which is",
                        "required for `locked_transfer`."
                      ]
                    },
                    {
                      "name": "ConflictingLockingBlocks",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The source and destination address have limits for their custom KILT",
                        "balance lock and thus cannot be merged. Should never be thrown."
                      ]
                    },
                    {
                      "name": "ConflictingVestingStarts",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The source and destination address differ in their vesting starting",
                        "blocks and thus cannot be merged. Should never be thrown."
                      ]
                    },
                    {
                      "name": "MaxClaimsExceeded",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "When migrating multiple accounts to the same target, the size of the",
                        "list of source addresses should never exceed `MaxClaims`."
                      ]
                    },
                    {
                      "name": "ExpectedLocks",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The source address does not have any balance lock at all which is",
                        "required for `locked_transfer`."
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The source address has less balance available than the locked amount",
                        "which should be transferred in `locked_transfer`."
                      ]
                    },
                    {
                      "name": "InsufficientLockedBalance",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The source address has less locked balance than the amount which",
                        "should be transferred in `locked_transfer`."
                      ]
                    },
                    {
                      "name": "NotUnownedAccount",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The source address is not a valid address which was set up as an",
                        "unowned account in the genesis build."
                      ]
                    },
                    {
                      "name": "MultipleVestingSchemes",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The source address has more than one vesting scheme which should",
                        "only be a theoretical issue."
                      ]
                    },
                    {
                      "name": "SameDestination",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The target address should not be the source address."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The signing account is not the transfer account."
                      ]
                    },
                    {
                      "name": "UnexpectedLocks",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "The source address has a balance lock and thus cannot be migrated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 285,
            "type": {
              "path": [
                "ctype",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CTypeNotFound",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "There is no CType with the given hash."
                      ]
                    },
                    {
                      "name": "CTypeAlreadyExists",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The CType already exists."
                      ]
                    },
                    {
                      "name": "UnableToPayFees",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The paying account was unable to pay the fees for creating a ctype."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 286,
            "type": {
              "path": [
                "attestation",
                "attestations",
                "AttestationDetails"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ctype_hash",
                      "type": 9,
                      "typeName": "CtypeHashOf<T>",
                      "docs": []
                    },
                    {
                      "name": "attester",
                      "type": 0,
                      "typeName": "AttesterOf<T>",
                      "docs": []
                    },
                    {
                      "name": "delegation_id",
                      "type": 57,
                      "typeName": "Option<DelegationNodeIdOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "revoked",
                      "type": 40,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 287,
                      "typeName": "Deposit<AccountIdOf<T>, BalanceOf<T>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 287,
            "type": {
              "path": [
                "kilt_support",
                "deposit",
                "Deposit"
              ],
              "params": [
                {
                  "name": "Account",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "Account",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "attestation",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyAttested",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "There is already an attestation with the same claim hash stored on",
                        "chain."
                      ]
                    },
                    {
                      "name": "AlreadyRevoked",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The attestation has already been revoked."
                      ]
                    },
                    {
                      "name": "AttestationNotFound",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "No attestation on chain matching the claim hash."
                      ]
                    },
                    {
                      "name": "CTypeMismatch",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The attestation CType does not match the CType specified in the",
                        "delegation hierarchy root."
                      ]
                    },
                    {
                      "name": "DelegationUnauthorizedToAttest",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The delegation node does not include the permission to create new",
                        "attestations. Only when the revoker is not the original attester."
                      ]
                    },
                    {
                      "name": "DelegationRevoked",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The delegation node has already been revoked.",
                        "Only when the revoker is not the original attester."
                      ]
                    },
                    {
                      "name": "NotDelegatedToAttester",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The delegation node owner is different than the attester.",
                        "Only when the revoker is not the original attester."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The call origin is not authorized to change the attestation."
                      ]
                    },
                    {
                      "name": "MaxDelegatedAttestationsExceeded",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The maximum number of delegated attestations has already been",
                        "reached for the corresponding delegation id such that another one",
                        "cannot be added."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 290,
            "type": {
              "path": [
                "delegation",
                "delegation_hierarchy",
                "DelegationNode"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "hierarchy_root_id",
                      "type": 9,
                      "typeName": "DelegationNodeIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": "parent",
                      "type": 57,
                      "typeName": "Option<DelegationNodeIdOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "children",
                      "type": 291,
                      "typeName": "BoundedBTreeSet<DelegationNodeIdOf<T>, T::MaxChildren>",
                      "docs": []
                    },
                    {
                      "name": "details",
                      "type": 293,
                      "typeName": "DelegationDetails<T>",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 287,
                      "typeName": "Deposit<AccountIdOf<T>, BalanceOf<T>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 291,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_btree_set",
                "BoundedBTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 292,
                      "typeName": "BTreeSet<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 292,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "delegation",
                "delegation_hierarchy",
                "DelegationDetails"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "DelegatorIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": "revoked",
                      "type": 40,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "permissions",
                      "type": 59,
                      "typeName": "Permissions",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 294,
            "type": {
              "path": [
                "delegation",
                "delegation_hierarchy",
                "DelegationHierarchyDetails"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ctype_hash",
                      "type": 9,
                      "typeName": "CtypeHashOf<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 295,
            "type": {
              "path": [
                "delegation",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DelegationAlreadyExists",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "There is already a delegation node with the same ID stored on chain."
                      ]
                    },
                    {
                      "name": "InvalidDelegateSignature",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The delegate's signature for the delegation creation operation is",
                        "invalid."
                      ]
                    },
                    {
                      "name": "DelegationNotFound",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "No delegation with the given ID stored on chain."
                      ]
                    },
                    {
                      "name": "DelegateNotFound",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "No delegate with the given ID stored on chain."
                      ]
                    },
                    {
                      "name": "HierarchyAlreadyExists",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "There is already a hierarchy with the same ID stored on chain."
                      ]
                    },
                    {
                      "name": "HierarchyNotFound",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "No hierarchy with the given ID stored on chain."
                      ]
                    },
                    {
                      "name": "MaxSearchDepthReached",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Max number of nodes checked without verifying the given condition."
                      ]
                    },
                    {
                      "name": "NotOwnerOfParentDelegation",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The delegation creator is not allowed to write the delegation",
                        "because they are not the owner of the delegation parent node."
                      ]
                    },
                    {
                      "name": "NotOwnerOfDelegationHierarchy",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The delegation creator is not allowed to write the delegation",
                        "because they are not the owner of the delegation root node."
                      ]
                    },
                    {
                      "name": "ParentDelegationNotFound",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "No parent delegation with the given ID stored on chain."
                      ]
                    },
                    {
                      "name": "ParentDelegationRevoked",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The parent delegation has previously been revoked."
                      ]
                    },
                    {
                      "name": "UnauthorizedRevocation",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "The delegation revoker is not allowed to revoke the delegation."
                      ]
                    },
                    {
                      "name": "UnauthorizedRemoval",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The call origin is not authorized to remove the delegation."
                      ]
                    },
                    {
                      "name": "UnauthorizedDelegation",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "The delegation creator is not allowed to create the delegation."
                      ]
                    },
                    {
                      "name": "ExceededRevocationBounds",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Max number of revocations for delegation nodes has been reached for",
                        "the operation."
                      ]
                    },
                    {
                      "name": "ExceededRemovalBounds",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Max number of removals for delegation nodes has been reached for the",
                        "operation."
                      ]
                    },
                    {
                      "name": "MaxRevocationsTooLarge",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "The max number of revocation exceeds the limit for the pallet."
                      ]
                    },
                    {
                      "name": "MaxRemovalsTooLarge",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "The max number of removals exceeds the limit for the pallet."
                      ]
                    },
                    {
                      "name": "MaxParentChecksTooLarge",
                      "fields": [],
                      "index": 18,
                      "docs": [
                        "The max number of parent checks exceeds the limit for the pallet."
                      ]
                    },
                    {
                      "name": "InternalError",
                      "fields": [],
                      "index": 19,
                      "docs": [
                        "An error that is not supposed to take place, yet it happened."
                      ]
                    },
                    {
                      "name": "MaxChildrenExceeded",
                      "fields": [],
                      "index": 20,
                      "docs": [
                        "The max number of all children has been reached for the",
                        "corresponding delegation node."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 296,
            "type": {
              "path": [
                "did",
                "did_details",
                "DidDetails"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "authentication_key",
                      "type": 9,
                      "typeName": "KeyIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": "key_agreement_keys",
                      "type": 297,
                      "typeName": "DidKeyAgreementKeySet<T>",
                      "docs": []
                    },
                    {
                      "name": "delegation_key",
                      "type": 57,
                      "typeName": "Option<KeyIdOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "attestation_key",
                      "type": 57,
                      "typeName": "Option<KeyIdOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "public_keys",
                      "type": 298,
                      "typeName": "DidPublicKeyMap<T>",
                      "docs": []
                    },
                    {
                      "name": "last_tx_counter",
                      "type": 4,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 287,
                      "typeName": "Deposit<AccountIdOf<T>, BalanceOf<T>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_btree_set",
                "BoundedBTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 292,
                      "typeName": "BTreeSet<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 298,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 9
                },
                {
                  "name": "V",
                  "type": 299
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 301,
                      "typeName": "BTreeMap<K, V>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 299,
            "type": {
              "path": [
                "did",
                "did_details",
                "DidPublicKeyDetails"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "key",
                      "type": 300,
                      "typeName": "DidPublicKey",
                      "docs": []
                    },
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "BlockNumberOf<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 300,
            "type": {
              "path": [
                "did",
                "did_details",
                "DidPublicKey"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PublicVerificationKey",
                      "fields": [
                        {
                          "name": null,
                          "type": 218,
                          "typeName": "DidVerificationKey",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "PublicEncryptionKey",
                      "fields": [
                        {
                          "name": null,
                          "type": 214,
                          "typeName": "DidEncryptionKey",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 301,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 9
                },
                {
                  "name": "V",
                  "type": 299
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 302,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 302,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 303
                }
              },
              "docs": []
            }
          },
          {
            "id": 303,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  9,
                  299
                ]
              },
              "docs": []
            }
          },
          {
            "id": 304,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  224
                ]
              },
              "docs": []
            }
          },
          {
            "id": 305,
            "type": {
              "path": [
                "did",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSignatureFormat",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The DID operation signature is not in the format the verification",
                        "key expects."
                      ]
                    },
                    {
                      "name": "InvalidSignature",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The DID operation signature is invalid for the payload and the",
                        "verification key provided."
                      ]
                    },
                    {
                      "name": "DidAlreadyPresent",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The DID with the given identifier is already present on chain."
                      ]
                    },
                    {
                      "name": "DidNotPresent",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "No DID with the given identifier is present on chain."
                      ]
                    },
                    {
                      "name": "VerificationKeyNotPresent",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "One or more verification keys referenced are not stored in the set",
                        "of verification keys."
                      ]
                    },
                    {
                      "name": "InvalidNonce",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The DID operation nonce is not equal to the current DID nonce + 1."
                      ]
                    },
                    {
                      "name": "UnsupportedDidAuthorizationCall",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The called extrinsic does not support DID authorisation."
                      ]
                    },
                    {
                      "name": "InvalidDidAuthorizationCall",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The call had parameters that conflicted with each other",
                        "or were invalid."
                      ]
                    },
                    {
                      "name": "MaxKeyAgreementKeysLimitExceeded",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "A number of new key agreement keys greater than the maximum allowed",
                        "has been provided."
                      ]
                    },
                    {
                      "name": "MaxPublicKeysPerDidExceeded",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The maximum number of public keys for this DID key identifier has",
                        "been reached."
                      ]
                    },
                    {
                      "name": "MaxTotalKeyAgreementKeysExceeded",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The maximum number of key agreements has been reached for the DID",
                        "subject."
                      ]
                    },
                    {
                      "name": "BadDidOrigin",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "The DID call was submitted by the wrong account"
                      ]
                    },
                    {
                      "name": "TransactionExpired",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The block number provided in a DID-authorized operation is invalid."
                      ]
                    },
                    {
                      "name": "DidAlreadyDeleted",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "The DID has already been previously deleted."
                      ]
                    },
                    {
                      "name": "NotOwnerOfDeposit",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Only the owner of the deposit can reclaim its reserved balance."
                      ]
                    },
                    {
                      "name": "UnableToPayFees",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "The origin is unable to reserve the deposit and pay the fee."
                      ]
                    },
                    {
                      "name": "MaxNumberOfServicesPerDidExceeded",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "The maximum number of service endpoints for a DID has been exceeded."
                      ]
                    },
                    {
                      "name": "MaxServiceIdLengthExceeded",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "The service endpoint ID exceeded the maximum allowed length."
                      ]
                    },
                    {
                      "name": "MaxServiceTypeLengthExceeded",
                      "fields": [],
                      "index": 18,
                      "docs": [
                        "One of the service endpoint types exceeded the maximum allowed",
                        "length."
                      ]
                    },
                    {
                      "name": "MaxNumberOfTypesPerServiceExceeded",
                      "fields": [],
                      "index": 19,
                      "docs": [
                        "The maximum number of types for a service endpoint has been",
                        "exceeded."
                      ]
                    },
                    {
                      "name": "MaxServiceUrlLengthExceeded",
                      "fields": [],
                      "index": 20,
                      "docs": [
                        "One of the service endpoint URLs exceeded the maximum allowed",
                        "length."
                      ]
                    },
                    {
                      "name": "MaxNumberOfUrlsPerServiceExceeded",
                      "fields": [],
                      "index": 21,
                      "docs": [
                        "The maximum number of URLs for a service endpoint has been exceeded."
                      ]
                    },
                    {
                      "name": "ServiceAlreadyPresent",
                      "fields": [],
                      "index": 22,
                      "docs": [
                        "A service with the provided ID is already present for the given DID."
                      ]
                    },
                    {
                      "name": "ServiceNotPresent",
                      "fields": [],
                      "index": 23,
                      "docs": [
                        "A service with the provided ID is not present under the given DID."
                      ]
                    },
                    {
                      "name": "InvalidServiceEncoding",
                      "fields": [],
                      "index": 24,
                      "docs": [
                        "One of the service endpoint details contains non-ASCII characters."
                      ]
                    },
                    {
                      "name": "StoredEndpointsCountTooLarge",
                      "fields": [],
                      "index": 25,
                      "docs": [
                        "The number of service endpoints stored under the DID is larger than",
                        "the number of endpoints to delete."
                      ]
                    },
                    {
                      "name": "InternalError",
                      "fields": [],
                      "index": 26,
                      "docs": [
                        "An error that is not supposed to take place, yet it happened."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 306,
            "type": {
              "path": [
                "pallet_did_lookup",
                "connection_record",
                "ConnectionRecord"
              ],
              "params": [
                {
                  "name": "DidIdentifier",
                  "type": 0
                },
                {
                  "name": "Account",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "did",
                      "type": 0,
                      "typeName": "DidIdentifier",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 287,
                      "typeName": "Deposit<Account, Balance>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 307,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 308,
            "type": {
              "path": [
                "pallet_did_lookup",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssociationNotFound",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The association does not exist."
                      ]
                    },
                    {
                      "name": "NotAuthorized",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The origin was not allowed to manage the association between the DID",
                        "and the account ID."
                      ]
                    },
                    {
                      "name": "OutdatedProof",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The supplied proof of ownership was outdated."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The account has insufficient funds and can't pay the fees or reserve",
                        "the deposit."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "pallet_web3_names",
                "web3_name",
                "Web3NameOwnership"
              ],
              "params": [
                {
                  "name": "Owner",
                  "type": 0
                },
                {
                  "name": "Deposit",
                  "type": 287
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "Owner",
                      "docs": []
                    },
                    {
                      "name": "claimed_at",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 287,
                      "typeName": "Deposit",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 310,
            "type": {
              "path": [
                "pallet_web3_names",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientFunds",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The tx submitter does not have enough funds to pay for the deposit."
                      ]
                    },
                    {
                      "name": "Web3NameAlreadyClaimed",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The specified name has already been previously claimed."
                      ]
                    },
                    {
                      "name": "Web3NameNotFound",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The specified name does not exist."
                      ]
                    },
                    {
                      "name": "OwnerAlreadyExists",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The specified owner already owns a name."
                      ]
                    },
                    {
                      "name": "OwnerNotFound",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The specified owner does not own any names."
                      ]
                    },
                    {
                      "name": "Web3NameBanned",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The specified name has been banned and cannot be interacted",
                        "with."
                      ]
                    },
                    {
                      "name": "Web3NameNotBanned",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The specified name is not currently banned."
                      ]
                    },
                    {
                      "name": "Web3NameAlreadyBanned",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The specified name has already been previously banned."
                      ]
                    },
                    {
                      "name": "NotAuthorized",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The actor cannot performed the specified operation."
                      ]
                    },
                    {
                      "name": "Web3NameTooShort",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "A name that is too short is being claimed."
                      ]
                    },
                    {
                      "name": "Web3NameTooLong",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "A name that is too long is being claimed."
                      ]
                    },
                    {
                      "name": "InvalidWeb3NameCharacter",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "A name that contains not allowed characters is being claimed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 311,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 312
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 312,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "UpgradeRestriction"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Present",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 313,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "relay_state_snapshot",
                "MessagingStateSnapshot"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "dmq_mqc_head",
                      "type": 9,
                      "typeName": "relay_chain::Hash",
                      "docs": []
                    },
                    {
                      "name": "relay_dispatch_queue_size",
                      "type": 314,
                      "typeName": "(u32, u32)",
                      "docs": []
                    },
                    {
                      "name": "ingress_channels",
                      "type": 315,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
                      "docs": []
                    },
                    {
                      "name": "egress_channels",
                      "type": 315,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 314,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  7,
                  7
                ]
              },
              "docs": []
            }
          },
          {
            "id": 315,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 316
                }
              },
              "docs": []
            }
          },
          {
            "id": 316,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  243,
                  317
                ]
              },
              "docs": []
            }
          },
          {
            "id": 317,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "AbridgedHrmpChannel"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_capacity",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_total_size",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "msg_count",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "total_size",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "mqc_head",
                      "type": 57,
                      "typeName": "Option<Hash>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 318,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "AbridgedHostConfiguration"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_code_size",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_head_data_size",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_upward_queue_count",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_upward_queue_size",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_upward_message_size",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_upward_message_num_per_candidate",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "hrmp_max_message_num_per_candidate",
                      "type": 7,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "validation_upgrade_cooldown",
                      "type": 7,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "validation_upgrade_delay",
                      "type": 7,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 319,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "MessageQueueChain"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "RelayHash",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 320,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 243
                },
                {
                  "name": "V",
                  "type": 319
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 321,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 321,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 322
                }
              },
              "docs": []
            }
          },
          {
            "id": 322,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  243,
                  319
                ]
              },
              "docs": []
            }
          },
          {
            "id": 323,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 324
                }
              },
              "docs": []
            }
          },
          {
            "id": 324,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "OutboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 243
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 243,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "sp_std::vec::Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 325,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OverlappingUpgrades",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Attempt to upgrade validation function while existing upgrade pending"
                      ]
                    },
                    {
                      "name": "ProhibitedByPolkadot",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Polkadot currently prohibits this parachain from upgrading its validation function"
                      ]
                    },
                    {
                      "name": "TooBig",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The supplied validation function has compiled into a blob larger than Polkadot is",
                        "willing to run"
                      ]
                    },
                    {
                      "name": "ValidationDataNotAvailable",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The inherent which supplies the validation data did not run this block"
                      ]
                    },
                    {
                      "name": "HostConfigurationNotAvailable",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The inherent which supplies the host configuration did not run this block"
                      ]
                    },
                    {
                      "name": "NotScheduled",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "No validation function upgrade is currently scheduled."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "No code upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The given code upgrade has not been authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 326,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 105
                },
                {
                  "name": "Call",
                  "type": 179
                },
                {
                  "name": "Signature",
                  "type": 233
                },
                {
                  "name": "Extra",
                  "type": 327
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 327,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  328,
                  329,
                  330,
                  331,
                  333,
                  334,
                  335
                ]
              },
              "docs": []
            }
          },
          {
            "id": 328,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 329,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 330,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 331,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 332,
                      "typeName": "Era",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 332,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 27,
                      "docs": []
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 28,
                      "docs": []
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 29,
                      "docs": []
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": []
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 36,
                      "docs": []
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 37,
                      "docs": []
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 38,
                      "docs": []
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 39,
                      "docs": []
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": []
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 41,
                      "docs": []
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 42,
                      "docs": []
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 43,
                      "docs": []
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 44,
                      "docs": []
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 45,
                      "docs": []
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 46,
                      "docs": []
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 47,
                      "docs": []
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 48,
                      "docs": []
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 49,
                      "docs": []
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 50,
                      "docs": []
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": []
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": []
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 54,
                      "docs": []
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 55,
                      "docs": []
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 56,
                      "docs": []
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 57,
                      "docs": []
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 58,
                      "docs": []
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 59,
                      "docs": []
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": []
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": []
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 62,
                      "docs": []
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 63,
                      "docs": []
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 64,
                      "docs": []
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 65,
                      "docs": []
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 66,
                      "docs": []
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 67,
                      "docs": []
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 68,
                      "docs": []
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 69,
                      "docs": []
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": []
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": []
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 72,
                      "docs": []
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 73,
                      "docs": []
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 74,
                      "docs": []
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 75,
                      "docs": []
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 76,
                      "docs": []
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 77,
                      "docs": []
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 78,
                      "docs": []
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 79,
                      "docs": []
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": []
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 81,
                      "docs": []
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 82,
                      "docs": []
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 83,
                      "docs": []
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 84,
                      "docs": []
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 85,
                      "docs": []
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 86,
                      "docs": []
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 87,
                      "docs": []
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 88,
                      "docs": []
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 89,
                      "docs": []
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 90,
                      "docs": []
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 91,
                      "docs": []
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 92,
                      "docs": []
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 93,
                      "docs": []
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 94,
                      "docs": []
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 95,
                      "docs": []
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 96,
                      "docs": []
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 97,
                      "docs": []
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 98,
                      "docs": []
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 99,
                      "docs": []
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 100,
                      "docs": []
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 101,
                      "docs": []
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 102,
                      "docs": []
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 103,
                      "docs": []
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 104,
                      "docs": []
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 105,
                      "docs": []
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 106,
                      "docs": []
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 107,
                      "docs": []
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 108,
                      "docs": []
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 109,
                      "docs": []
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 110,
                      "docs": []
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 111,
                      "docs": []
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 112,
                      "docs": []
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 113,
                      "docs": []
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 114,
                      "docs": []
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 115,
                      "docs": []
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 116,
                      "docs": []
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 117,
                      "docs": []
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 118,
                      "docs": []
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 119,
                      "docs": []
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 120,
                      "docs": []
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 121,
                      "docs": []
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 122,
                      "docs": []
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 123,
                      "docs": []
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 124,
                      "docs": []
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 125,
                      "docs": []
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 126,
                      "docs": []
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 127,
                      "docs": []
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 128,
                      "docs": []
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 129,
                      "docs": []
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 130,
                      "docs": []
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 131,
                      "docs": []
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 132,
                      "docs": []
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 133,
                      "docs": []
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 134,
                      "docs": []
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 135,
                      "docs": []
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 136,
                      "docs": []
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 137,
                      "docs": []
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 138,
                      "docs": []
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 139,
                      "docs": []
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 140,
                      "docs": []
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 141,
                      "docs": []
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 142,
                      "docs": []
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 143,
                      "docs": []
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 144,
                      "docs": []
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 145,
                      "docs": []
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 146,
                      "docs": []
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 147,
                      "docs": []
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 148,
                      "docs": []
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 149,
                      "docs": []
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 150,
                      "docs": []
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 151,
                      "docs": []
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 152,
                      "docs": []
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 153,
                      "docs": []
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 154,
                      "docs": []
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 155,
                      "docs": []
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 156,
                      "docs": []
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 157,
                      "docs": []
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 158,
                      "docs": []
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 159,
                      "docs": []
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 160,
                      "docs": []
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 161,
                      "docs": []
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 162,
                      "docs": []
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 163,
                      "docs": []
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 164,
                      "docs": []
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 165,
                      "docs": []
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 166,
                      "docs": []
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 167,
                      "docs": []
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 168,
                      "docs": []
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 169,
                      "docs": []
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 170,
                      "docs": []
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 171,
                      "docs": []
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 172,
                      "docs": []
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 173,
                      "docs": []
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 174,
                      "docs": []
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 175,
                      "docs": []
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 176,
                      "docs": []
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 177,
                      "docs": []
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 178,
                      "docs": []
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 179,
                      "docs": []
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 180,
                      "docs": []
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 181,
                      "docs": []
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 182,
                      "docs": []
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 183,
                      "docs": []
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 184,
                      "docs": []
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 185,
                      "docs": []
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 186,
                      "docs": []
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 187,
                      "docs": []
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 188,
                      "docs": []
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 189,
                      "docs": []
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 190,
                      "docs": []
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 191,
                      "docs": []
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 192,
                      "docs": []
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 193,
                      "docs": []
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 194,
                      "docs": []
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 195,
                      "docs": []
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 196,
                      "docs": []
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 197,
                      "docs": []
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 198,
                      "docs": []
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 199,
                      "docs": []
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 200,
                      "docs": []
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 201,
                      "docs": []
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 202,
                      "docs": []
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 203,
                      "docs": []
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 204,
                      "docs": []
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 205,
                      "docs": []
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 206,
                      "docs": []
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 207,
                      "docs": []
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 208,
                      "docs": []
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 209,
                      "docs": []
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 210,
                      "docs": []
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 211,
                      "docs": []
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 212,
                      "docs": []
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 213,
                      "docs": []
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 214,
                      "docs": []
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 215,
                      "docs": []
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 216,
                      "docs": []
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 217,
                      "docs": []
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 218,
                      "docs": []
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 219,
                      "docs": []
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 220,
                      "docs": []
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 221,
                      "docs": []
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 222,
                      "docs": []
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 223,
                      "docs": []
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 224,
                      "docs": []
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 225,
                      "docs": []
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 226,
                      "docs": []
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 227,
                      "docs": []
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 228,
                      "docs": []
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 229,
                      "docs": []
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 230,
                      "docs": []
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 231,
                      "docs": []
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 232,
                      "docs": []
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 233,
                      "docs": []
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 234,
                      "docs": []
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 235,
                      "docs": []
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 236,
                      "docs": []
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 237,
                      "docs": []
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 238,
                      "docs": []
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 239,
                      "docs": []
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 240,
                      "docs": []
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 241,
                      "docs": []
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 242,
                      "docs": []
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 243,
                      "docs": []
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 244,
                      "docs": []
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 245,
                      "docs": []
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 246,
                      "docs": []
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 247,
                      "docs": []
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 248,
                      "docs": []
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 249,
                      "docs": []
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 250,
                      "docs": []
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 251,
                      "docs": []
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 252,
                      "docs": []
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 253,
                      "docs": []
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 254,
                      "docs": []
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 255,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 333,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 92,
                      "typeName": "T::Index",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 334,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 335,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 108,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 336,
            "type": {
              "path": [
                "spiritnet_runtime",
                "Runtime"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00",
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x000000000000000000000000000000000000000000000000",
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00",
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 7,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "plain": 11
                },
                "fallback": "0x00",
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "plain": 15
                },
                "fallback": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: This storage item is explicitly unbounded since it is never intended to be read",
                  " from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 68
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 69
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "plain": 40
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "type": {
                  "plain": 40
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "plain": 66
                },
                "fallback": "0x00",
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "type": 72
          },
          "events": {
            "type": 18
          },
          "constants": [
            {
              "name": "BlockWeights",
              "type": 77,
              "value": "0x00f2052a010000000088526a74000000405973070000000001c0180fa44b0000000100e6bd4f57000000010000000000000000405973070000000001c0baa3be68000000010088526a740000000100a2941a1d0000004059730700000000000000",
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "type": 81,
              "value": "0x00003c000000500000005000",
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "type": 4,
              "value": "0x6009000000000000",
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "type": 83,
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "type": 84,
              "value": "0x386b696c742d7370697269746e6574386b696c742d7370697269746e6574010000007c2900000000000028df6acb689907609b0400000037e397fc7c91f5e401000000bc9d89904f5b923f0100000037c8bb1350a9a2a80100000040fe3ad401f8959a05000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000dd718d5cc53262d401000000ea93e3f16f3d6962020000000200000000",
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "type": 52,
              "value": "0x2600",
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "errors": {
            "type": 89
          },
          "index": 0
        },
        {
          "name": "RandomnessCollectiveFlip",
          "storage": {
            "prefix": "RandomnessCollectiveFlip",
            "items": [
              {
                "name": "RandomMaterial",
                "modifier": "Default",
                "type": {
                  "plain": 90
                },
                "fallback": "0x00",
                "docs": [
                  " Series of block headers from the last 81 blocks that acts as random seed material. This",
                  " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                  " the oldest hash."
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 1
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "plain": 40
                },
                "fallback": "0x00",
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "type": 91
          },
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": 4,
              "value": "0x7017000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "errors": null,
          "index": 2
        },
        {
          "name": "Indices",
          "storage": {
            "prefix": "Indices",
            "items": [
              {
                "name": "Accounts",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 93
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The lookup from index to account."
                ]
              }
            ]
          },
          "calls": {
            "type": 94
          },
          "events": {
            "type": 26
          },
          "constants": [
            {
              "name": "Deposit",
              "type": 6,
              "value": "0x00b47cf3283500000000000000000000",
              "docs": [
                " The deposit needed for reserving an index."
              ]
            }
          ],
          "errors": {
            "type": 95
          },
          "index": 5
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 96
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 100
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 103
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "type": 104
          },
          "events": {
            "type": 27
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0x00a0724e180900000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "type": 7,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": 7,
              "value": "0x32000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "errors": {
            "type": 109
          },
          "index": 6
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "plain": 110
                },
                "fallback": "0x000064a7b3b6e00d0000000000000000",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 111
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "TransactionByteFee",
              "type": 6,
              "value": "0x00ca9a3b000000000000000000000000",
              "docs": [
                " The fee to be paid for making a transaction; the per-byte portion."
              ]
            },
            {
              "name": "OperationalFeeMultiplier",
              "type": 2,
              "value": "0x05",
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            },
            {
              "name": "WeightToFee",
              "type": 112,
              "value": "0x04037b000000000000000000000000000038761c2e0001",
              "docs": [
                " The polynomial that is applied in order to derive fee from weight."
              ]
            }
          ],
          "errors": null,
          "index": 7
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "items": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "type": {
                  "plain": 114
                },
                "fallback": "0x00",
                "docs": [
                  " Uncles"
                ]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Author of current block."
                ]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "type": {
                  "plain": 40
                },
                "fallback": "0x00",
                "docs": [
                  " Whether uncles were already set in this block."
                ]
              }
            ]
          },
          "calls": {
            "type": 117
          },
          "events": null,
          "constants": [
            {
              "name": "UncleGenerations",
              "type": 4,
              "value": "0x0000000000000000",
              "docs": [
                " The number of blocks back we should accept uncles.",
                " This means that we will deal with uncle-parents that are",
                " `UncleGenerations + 1` before `now`."
              ]
            }
          ],
          "errors": {
            "type": 121
          },
          "index": 20
        },
        {
          "name": "ParachainStaking",
          "storage": {
            "prefix": "ParachainStaking",
            "items": [
              {
                "name": "MaxSelectedCandidates",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  " The maximum number of collator candidates selected at each round."
                ]
              },
              {
                "name": "Round",
                "modifier": "Default",
                "type": {
                  "plain": 122
                },
                "fallback": "0x0000000000000000000000001400000000000000",
                "docs": [
                  " Current round number and next round scheduled transition."
                ]
              },
              {
                "name": "LastDelegation",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 123
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Delegation information for the latest session in which a delegator",
                  " delegated.",
                  "",
                  " It maps from an account to the number of delegations in the last",
                  " session in which they (re-)delegated."
                ]
              },
              {
                "name": "DelegatorState",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 124
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Delegation staking information.",
                  "",
                  " It maps from an account to its delegation details."
                ]
              },
              {
                "name": "CandidatePool",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 129
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The staking information for a candidate.",
                  "",
                  " It maps from an account to its information.",
                  " Moreover, it counts the number of candidates."
                ]
              },
              {
                "name": "CounterForCandidatePool",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "TotalCollatorStake",
                "modifier": "Default",
                "type": {
                  "plain": 133
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Total funds locked to back the currently selected collators.",
                  " The sum of all collator and their delegator stakes.",
                  "",
                  " Note: There are more funds locked by this pallet, since the backing for",
                  " non collating candidates is not included in [TotalCollatorStake]."
                ]
              },
              {
                "name": "TopCandidates",
                "modifier": "Default",
                "type": {
                  "plain": 134
                },
                "fallback": "0x00",
                "docs": [
                  " The collator candidates with the highest amount of stake.",
                  "",
                  " Each time the stake of a collator is increased, it is checked whether",
                  " this pushes another candidate out of the list. When the stake is",
                  " reduced however, it is not checked if another candidate has more stake,",
                  " since this would require iterating over the entire [CandidatePool].",
                  "",
                  " There must always be more candidates than [MaxSelectedCandidates] so",
                  " that a collator can drop out of the collator set by reducing their",
                  " stake."
                ]
              },
              {
                "name": "InflationConfig",
                "modifier": "Default",
                "type": {
                  "plain": 136
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Inflation configuration."
                ]
              },
              {
                "name": "Unstaking",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 139
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The funds waiting to be unstaked.",
                  "",
                  " It maps from accounts to all the funds addressed to them in the future",
                  " blocks."
                ]
              },
              {
                "name": "MaxCollatorCandidateStake",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The maximum amount a collator candidate can stake."
                ]
              },
              {
                "name": "LastRewardReduction",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The year in which the last automatic reduction of the reward rates",
                  " occurred.",
                  "",
                  " It starts at zero at genesis and increments by one every BLOCKS_PER_YEAR",
                  " many blocks."
                ]
              },
              {
                "name": "ForceNewRound",
                "modifier": "Default",
                "type": {
                  "plain": 40
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 143
          },
          "events": {
            "type": 29
          },
          "constants": [
            {
              "name": "MinBlocksPerRound",
              "type": 4,
              "value": "0x2c01000000000000",
              "docs": [
                " Minimum number of blocks validation rounds can last."
              ]
            },
            {
              "name": "DefaultBlocksPerRound",
              "type": 4,
              "value": "0x5802000000000000",
              "docs": [
                " Default number of blocks validation rounds last, as set in the",
                " genesis configuration."
              ]
            },
            {
              "name": "StakeDuration",
              "type": 4,
              "value": "0xe0c4000000000000",
              "docs": [
                " Number of blocks for which unstaked balance will still be locked",
                " before it can be unlocked by actively calling the extrinsic",
                " `unlock_unstaked`."
              ]
            },
            {
              "name": "ExitQueueDelay",
              "type": 7,
              "value": "0x02000000",
              "docs": [
                " Number of rounds a collator has to stay active after submitting a",
                " request to leave the set of collator candidates."
              ]
            },
            {
              "name": "MinCollators",
              "type": 7,
              "value": "0x10000000",
              "docs": [
                " Minimum number of collators selected from the set of candidates at",
                " every validation round."
              ]
            },
            {
              "name": "MinRequiredCollators",
              "type": 7,
              "value": "0x04000000",
              "docs": [
                " Minimum number of collators which cannot leave the network if there",
                " are no others."
              ]
            },
            {
              "name": "MaxDelegationsPerRound",
              "type": 7,
              "value": "0x01000000",
              "docs": [
                " Maximum number of delegations which can be made within the same",
                " round.",
                "",
                " NOTE: To prevent re-delegation-reward attacks, we should keep this",
                " to be one."
              ]
            },
            {
              "name": "MaxDelegatorsPerCollator",
              "type": 7,
              "value": "0x23000000",
              "docs": [
                " Maximum number of delegators a single collator can have."
              ]
            },
            {
              "name": "MaxCollatorsPerDelegator",
              "type": 7,
              "value": "0x01000000",
              "docs": [
                " Maximum number of collators a single delegator can delegate."
              ]
            },
            {
              "name": "MaxTopCandidates",
              "type": 7,
              "value": "0x4b000000",
              "docs": [
                " Maximum size of the top candidates set."
              ]
            },
            {
              "name": "MinCollatorStake",
              "type": 6,
              "value": "0x0000e8890423c78a0000000000000000",
              "docs": [
                " Minimum stake required for any account to be elected as validator",
                " for a round."
              ]
            },
            {
              "name": "MinCollatorCandidateStake",
              "type": 6,
              "value": "0x0000e8890423c78a0000000000000000",
              "docs": [
                " Minimum stake required for any account to be added to the set of",
                " candidates."
              ]
            },
            {
              "name": "MinDelegation",
              "type": 6,
              "value": "0x000082dfe40d47000000000000000000",
              "docs": [
                " Minimum stake required for any account to be able to delegate."
              ]
            },
            {
              "name": "MinDelegatorStake",
              "type": 6,
              "value": "0x000082dfe40d47000000000000000000",
              "docs": [
                " Minimum stake required for any account to become a delegator."
              ]
            },
            {
              "name": "MaxUnstakeRequests",
              "type": 7,
              "value": "0x0a000000",
              "docs": [
                " Max number of concurrent active unstaking requests before",
                " unlocking.",
                "",
                " NOTE: To protect against irremovability of a candidate or delegator,",
                " we only allow for MaxUnstakeRequests - 1 many manual unstake",
                " requests. The last one serves as a placeholder for the cases of",
                " calling either `kick_delegator`, force_remove_candidate` or",
                " `execute_leave_candidates`. Otherwise, a user could max out their",
                " unstake requests and prevent themselves from being kicked from the",
                " set of candidates/delegators until they unlock their funds."
              ]
            },
            {
              "name": "NetworkRewardStart",
              "type": 4,
              "value": "0x48a3c80000000000",
              "docs": [
                " The starting block number for the network rewards. Once the current",
                " block number exceeds this start, the beneficiary will receive the",
                " configured reward in each block."
              ]
            },
            {
              "name": "NetworkRewardRate",
              "type": 30,
              "value": "0x00008a5d78456301",
              "docs": [
                " The rate in percent for the network rewards which are based on the",
                " maximum number of collators and the maximum amount a collator can",
                " stake."
              ]
            }
          ],
          "errors": {
            "type": 144
          },
          "index": 21
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "items": [
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "plain": 33
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "type": {
                  "plain": 40
                },
                "fallback": "0x00",
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "type": {
                  "plain": 145
                },
                "fallback": "0x00",
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "type": {
                  "plain": 150
                },
                "fallback": "0x00",
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 147
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 151,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "type": 153
          },
          "events": {
            "type": 31
          },
          "constants": [],
          "errors": {
            "type": 154
          },
          "index": 22
        },
        {
          "name": "Aura",
          "storage": {
            "prefix": "Aura",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 155
                },
                "fallback": "0x00",
                "docs": [
                  " The current authority set."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "plain": 157
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The current slot of this block.",
                  "",
                  " This will be set in `on_initialize`."
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 23
        },
        {
          "name": "AuraExt",
          "storage": {
            "prefix": "AuraExt",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 156
                },
                "fallback": "0x00",
                "docs": [
                  " Serves as cache for the authorities.",
                  "",
                  " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                  " but we require the old authorities to verify the seal when validating a PoV. This will always",
                  " be updated to the latest AuRa authorities in `on_finalize`."
                ]
              }
            ]
          },
          "calls": {
            "type": 158
          },
          "events": null,
          "constants": [],
          "errors": null,
          "index": 24
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "items": [
              {
                "name": "PublicPropCount",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of (public) proposals that have been made so far."
                ]
              },
              {
                "name": "PublicProps",
                "modifier": "Default",
                "type": {
                  "plain": 159
                },
                "fallback": "0x00",
                "docs": [
                  " The public proposals. Unsorted. The second item is the proposal's hash."
                ]
              },
              {
                "name": "DepositOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 7,
                    "value": 161
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Those who have locked a deposit.",
                  "",
                  " TWOX-NOTE: Safe, as increasing integer keys are safe."
                ]
              },
              {
                "name": "Preimages",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 162
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                  " The block number is the block at which it was deposited."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "LowestUnbaked",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  " The lowest referendum index representing an unbaked referendum. Equal to",
                  " `ReferendumCount` if there isn't a unbaked referendum."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 7,
                    "value": 163
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information concerning any given referendum.",
                  "",
                  " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                ]
              },
              {
                "name": "VotingOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 166
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " All votes for a particular voter. We store the balance for the number of votes that we",
                  " have recorded. The second item is the total amount of delegations, that will be added.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": "Default",
                "type": {
                  "plain": 40
                },
                "fallback": "0x00",
                "docs": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": "Optional",
                "type": {
                  "plain": 172
                },
                "fallback": "0x00",
                "docs": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 173
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 40
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Record of all proposals that have been subject to emergency cancellation."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Optional",
                "type": {
                  "plain": 174
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "type": 175
          },
          "events": {
            "type": 32
          },
          "constants": [
            {
              "name": "EnactmentPeriod",
              "type": 4,
              "value": "0x201c000000000000",
              "docs": [
                " The period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case",
                " where they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "type": 4,
              "value": "0xe0c4000000000000",
              "docs": [
                " How often (in blocks) new public referenda are launched."
              ]
            },
            {
              "name": "VotingPeriod",
              "type": 4,
              "value": "0xe0c4000000000000",
              "docs": [
                " How often (in blocks) to check for new votes."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "type": 4,
              "value": "0xe0c4000000000000",
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            },
            {
              "name": "MinimumDeposit",
              "type": 6,
              "value": "0x0080c6a47e8d03000000000000000000",
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "InstantAllowed",
              "type": 40,
              "value": "0x01",
              "docs": [
                " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
                " want to set this permanently to `false`, others may want to condition it on things such",
                " as an upgrade having happened recently."
              ]
            },
            {
              "name": "FastTrackVotingPeriod",
              "type": 4,
              "value": "0x8403000000000000",
              "docs": [
                " Minimum voting period allowed for a fast-track referendum."
              ]
            },
            {
              "name": "CooloffPeriod",
              "type": 4,
              "value": "0xe0c4000000000000",
              "docs": [
                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
              ]
            },
            {
              "name": "PreimageByteDeposit",
              "type": 6,
              "value": "0x00743ba40b0000000000000000000000",
              "docs": [
                " The amount of balance that must be deposited per byte of preimage stored."
              ]
            },
            {
              "name": "MaxVotes",
              "type": 7,
              "value": "0x64000000",
              "docs": [
                " The maximum number of votes for an account.",
                "",
                " Also used to compute weight, an overly big value can",
                " lead to extrinsic with very big weight: see `delegate` for instance."
              ]
            },
            {
              "name": "MaxProposals",
              "type": 7,
              "value": "0x64000000",
              "docs": [
                " The maximum number of public proposals that can exist at any time."
              ]
            }
          ],
          "errors": {
            "type": 177
          },
          "index": 30
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 178
                },
                "fallback": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 179
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 248
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 33
                },
                "fallback": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "type": 180
          },
          "events": {
            "type": 39
          },
          "constants": [],
          "errors": {
            "type": 249
          },
          "index": 31
        },
        {
          "name": "TechnicalCommittee",
          "storage": {
            "prefix": "TechnicalCommittee",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 250
                },
                "fallback": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 179
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 248
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 33
                },
                "fallback": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "type": 181
          },
          "events": {
            "type": 41
          },
          "constants": [],
          "errors": {
            "type": 251
          },
          "index": 32
        },
        {
          "name": "TechnicalMembership",
          "storage": {
            "prefix": "TechnicalMembership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 33
                },
                "fallback": "0x00",
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "type": 182
          },
          "events": {
            "type": 42
          },
          "constants": [],
          "errors": {
            "type": 252
          },
          "index": 34
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 7,
                    "value": 253
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "plain": 254
                },
                "fallback": "0x00",
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "type": 183
          },
          "events": {
            "type": 43
          },
          "constants": [
            {
              "name": "ProposalBond",
              "type": 255,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": 6,
              "value": "0x000082dfe40d47000000000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "ProposalBondMaximum",
              "type": 256,
              "value": "0x00",
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "type": 4,
              "value": "0xc0a8000000000000",
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "type": 255,
              "value": "0x00000000",
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "type": 257,
              "value": "0x6b696c742f747379",
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "type": 7,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "errors": {
            "type": 258
          },
          "index": 35
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "type": 184
          },
          "events": {
            "type": 44
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "type": 7,
              "value": "0xaa2a0000",
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "errors": {
            "type": 259
          },
          "index": 40
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "items": [
              {
                "name": "Vesting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 260
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information regarding the vesting of a given account."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 262
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with latest version, as determined by the genesis build."
                ]
              }
            ]
          },
          "calls": {
            "type": 192
          },
          "events": {
            "type": 45
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ]
            },
            {
              "name": "MaxVestingSchedules",
              "type": 7,
              "value": "0x1c000000",
              "docs": []
            }
          ],
          "errors": {
            "type": 263
          },
          "index": 41
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "items": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 264
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 10,
                    "value": 47
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Lookup from identity to the block number and index of the task."
                ]
              }
            ]
          },
          "calls": {
            "type": 194
          },
          "events": {
            "type": 46
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "type": 4,
              "value": "0x00a0db215d000000",
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "type": 7,
              "value": "0x32000000",
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "errors": {
            "type": 267
          },
          "index": 42
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "items": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 268
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 272
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": {
            "type": 197
          },
          "events": {
            "type": 50
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "type": 6,
              "value": "0x0020f7a54b3300000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "type": 6,
              "value": "0x00f4a92b800100000000000000000000",
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "type": 7,
              "value": "0x0a000000",
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "type": 7,
              "value": "0x0a000000",
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "type": 6,
              "value": "0x0020f7a54b3300000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "type": 6,
              "value": "0x00e85357000300000000000000000000",
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "errors": {
            "type": 276
          },
          "index": 43
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "items": [
              {
                "name": "StatusFor",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 277
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The request status of a given hash."
                ]
              },
              {
                "name": "PreimageFor",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 280
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The preimages stored by this pallet."
                ]
              }
            ]
          },
          "calls": {
            "type": 199
          },
          "events": {
            "type": 53
          },
          "constants": [],
          "errors": {
            "type": 281
          },
          "index": 44
        },
        {
          "name": "KiltLaunch",
          "storage": {
            "prefix": "KiltLaunch",
            "items": [
              {
                "name": "TransferAccount",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Account which is permitted to do token transfers in PoA phase.",
                  "",
                  " Required for the claiming process."
                ]
              },
              {
                "name": "UnlockingAt",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 282
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps a block to account ids which have their balance locked.",
                  "",
                  " Required for automatic unlocking once the block number is reached in",
                  " `on_initialize`."
                ]
              },
              {
                "name": "BalanceLocks",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 283
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps an account id to the (block, balance) pair in which the latter can",
                  " be unlocked.",
                  "",
                  " Required for the claiming process."
                ]
              },
              {
                "name": "UnownedAccount",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 36
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps an unowned account id to an empty value which reflects whether it",
                  " is a genesis account which should be migrated, if it exists.",
                  "",
                  " Required for the claiming process."
                ]
              }
            ]
          },
          "calls": {
            "type": 200
          },
          "events": {
            "type": 54
          },
          "constants": [
            {
              "name": "MaxClaims",
              "type": 7,
              "value": "0x32000000",
              "docs": [
                " Maximum number of claims which can be migrated in a single call.",
                " Used for weight estimation.",
                "",
                " Note: Benchmarks will need to be re-run and weights adjusted if this",
                " changes."
              ]
            },
            {
              "name": "AutoUnlockBound",
              "type": 7,
              "value": "0x64000000",
              "docs": [
                " Maximum number of accounts that get unlocked in a single block."
              ]
            },
            {
              "name": "UsableBalance",
              "type": 6,
              "value": "0x0080c6a47e8d03000000000000000000",
              "docs": [
                " Amount of Balance which will be made available for each account",
                " which has either vesting or locking such that transaction fees can",
                " be paid from this."
              ]
            },
            {
              "name": "PalletId",
              "type": 257,
              "value": "0x6b696c742f6c6368",
              "docs": [
                " The kilt launch's pallet id, used for deriving its sovereign account",
                " ID."
              ]
            }
          ],
          "errors": {
            "type": 284
          },
          "index": 60
        },
        {
          "name": "Ctype",
          "storage": {
            "prefix": "Ctype",
            "items": [
              {
                "name": "Ctypes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " CTypes stored on chain.",
                  "",
                  " It maps from a CType hash to its creator."
                ]
              }
            ]
          },
          "calls": {
            "type": 202
          },
          "events": {
            "type": 55
          },
          "constants": [],
          "errors": {
            "type": 285
          },
          "index": 61
        },
        {
          "name": "Attestation",
          "storage": {
            "prefix": "Attestation",
            "items": [
              {
                "name": "Attestations",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 286
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Attestations stored on chain.",
                  "",
                  " It maps from a claim hash to the full attestation."
                ]
              },
              {
                "name": "DelegatedAttestations",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 288
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Delegated attestations stored on chain.",
                  "",
                  " It maps from a delegation ID to a vector of claim hashes."
                ]
              }
            ]
          },
          "calls": {
            "type": 203
          },
          "events": {
            "type": 56
          },
          "constants": [
            {
              "name": "Deposit",
              "type": 6,
              "value": "0x00a88d39f56d00000000000000000000",
              "docs": [
                " The deposit that is required for storing an attestation."
              ]
            },
            {
              "name": "MaxDelegatedAttestations",
              "type": 7,
              "value": "0xe8030000",
              "docs": [
                " The maximum number of delegated attestations which can be made by",
                " the same delegation."
              ]
            }
          ],
          "errors": {
            "type": 289
          },
          "index": 62
        },
        {
          "name": "Delegation",
          "storage": {
            "prefix": "Delegation",
            "items": [
              {
                "name": "DelegationNodes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 290
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Delegation nodes stored on chain.",
                  "",
                  " It maps from a node ID to the node details."
                ]
              },
              {
                "name": "DelegationHierarchies",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 294
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Delegation hierarchies stored on chain.",
                  "",
                  " It maps for a (root) node ID to the hierarchy details."
                ]
              }
            ]
          },
          "calls": {
            "type": 204
          },
          "events": {
            "type": 58
          },
          "constants": [
            {
              "name": "Deposit",
              "type": 6,
              "value": "0x0080c6a47e8d03000000000000000000",
              "docs": [
                " The deposit that is required for storing a delegation."
              ]
            },
            {
              "name": "MaxSignatureByteLength",
              "type": 52,
              "value": "0x4000",
              "docs": []
            },
            {
              "name": "MaxRevocations",
              "type": 7,
              "value": "0x05000000",
              "docs": [
                " Maximum number of revocations."
              ]
            },
            {
              "name": "MaxRemovals",
              "type": 7,
              "value": "0x05000000",
              "docs": [
                " Maximum number of removals. Should be same as MaxRevocations"
              ]
            },
            {
              "name": "MaxParentChecks",
              "type": 7,
              "value": "0x05000000",
              "docs": [
                " Maximum number of upwards traversals of the delegation tree from a",
                " node to the root and thus the depth of the delegation tree."
              ]
            },
            {
              "name": "MaxChildren",
              "type": 7,
              "value": "0xe8030000",
              "docs": [
                " Maximum number of all children for a delegation node. For a binary",
                " tree, this should be twice the maximum depth of the tree, i.e.",
                " `2 ^ MaxParentChecks`."
              ]
            }
          ],
          "errors": {
            "type": 295
          },
          "index": 63
        },
        {
          "name": "Did",
          "storage": {
            "prefix": "Did",
            "items": [
              {
                "name": "Did",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 296
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " DIDs stored on chain.",
                  "",
                  " It maps from a DID identifier to the DID details."
                ]
              },
              {
                "name": "ServiceEndpoints",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 304,
                    "value": 223
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Service endpoints associated with DIDs.",
                  "",
                  " It maps from (DID identifier, service ID) to the service details."
                ]
              },
              {
                "name": "DidEndpointsCount",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 7
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " Counter of service endpoints for each DID.",
                  "",
                  " It maps from (DID identifier) to a 32-bit counter."
                ]
              },
              {
                "name": "DidBlacklist",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 36
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of DIDs that have been deleted and cannot therefore be created",
                  " again for security reasons.",
                  "",
                  " It maps from a DID identifier to a unit tuple, for the sake of tracking",
                  " DID identifiers."
                ]
              }
            ]
          },
          "calls": {
            "type": 211
          },
          "events": {
            "type": 60
          },
          "constants": [
            {
              "name": "Deposit",
              "type": 6,
              "value": "0x00983ea62c2207000000000000000000",
              "docs": [
                " The amount of balance that will be taken for each DID as a deposit",
                " to incentivise fair use of the on chain storage. The deposit can be",
                " reclaimed when the DID is deleted."
              ]
            },
            {
              "name": "Fee",
              "type": 6,
              "value": "0x00203d88792d00000000000000000000",
              "docs": [
                " The amount of balance that will be taken for each DID as a fee to",
                " incentivise fair use of the on chain storage. The fee will not get",
                " refunded when the DID is deleted."
              ]
            },
            {
              "name": "MaxPublicKeysPerDid",
              "type": 7,
              "value": "0x14000000",
              "docs": [
                " Maximum number of total public keys which can be stored per DID key",
                " identifier. This includes the ones currently used for",
                " authentication, key agreement, attestation, and delegation."
              ]
            },
            {
              "name": "MaxNewKeyAgreementKeys",
              "type": 7,
              "value": "0x0a000000",
              "docs": [
                " Maximum number of key agreement keys that can be added in a creation",
                " operation."
              ]
            },
            {
              "name": "MaxTotalKeyAgreementKeys",
              "type": 7,
              "value": "0x13000000",
              "docs": [
                " Maximum number of total key agreement keys that can be stored for a",
                " DID subject.",
                "",
                " Should be greater than `MaxNewKeyAgreementKeys`."
              ]
            },
            {
              "name": "MaxBlocksTxValidity",
              "type": 4,
              "value": "0x2c01000000000000",
              "docs": [
                " The maximum number of blocks a DID-authorized operation is",
                " considered valid after its creation."
              ]
            },
            {
              "name": "MaxNumberOfServicesPerDid",
              "type": 7,
              "value": "0x19000000",
              "docs": [
                " The maximum number of services that can be stored under a DID."
              ]
            },
            {
              "name": "MaxServiceIdLength",
              "type": 7,
              "value": "0x32000000",
              "docs": [
                " The maximum length of a service ID."
              ]
            },
            {
              "name": "MaxServiceTypeLength",
              "type": 7,
              "value": "0x32000000",
              "docs": [
                " The maximum length of a service type description."
              ]
            },
            {
              "name": "MaxNumberOfTypesPerService",
              "type": 7,
              "value": "0x01000000",
              "docs": [
                " The maximum number of a types description for a service endpoint."
              ]
            },
            {
              "name": "MaxServiceUrlLength",
              "type": 7,
              "value": "0xc8000000",
              "docs": [
                " The maximum length of a service URL."
              ]
            },
            {
              "name": "MaxNumberOfUrlsPerService",
              "type": 7,
              "value": "0x01000000",
              "docs": [
                " The maximum number of a URLs for a service endpoint."
              ]
            }
          ],
          "errors": {
            "type": 305
          },
          "index": 64
        },
        {
          "name": "Inflation",
          "storage": null,
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "InitialPeriodLength",
              "type": 4,
              "value": "0x48a3c80000000000",
              "docs": [
                " The length of the initial period in which the constant reward is",
                " minted. Once the current block exceeds this, rewards are no further",
                " issued."
              ]
            },
            {
              "name": "InitialPeriodReward",
              "type": 6,
              "value": "0x36f539fdaeb302000000000000000000",
              "docs": [
                " The amount of newly issued tokens per block during the initial",
                " period."
              ]
            }
          ],
          "errors": null,
          "index": 66
        },
        {
          "name": "DidLookup",
          "storage": {
            "prefix": "DidLookup",
            "items": [
              {
                "name": "ConnectedDids",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 306
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping from account identifiers to DIDs."
                ]
              },
              {
                "name": "ConnectedAccounts",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 307,
                    "value": 36
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping from (DID + account identifier) -> ().",
                  " The empty tuple is used as a sentinel value to simply indicate the",
                  " presence of a given tuple in the map."
                ]
              }
            ]
          },
          "calls": {
            "type": 232
          },
          "events": {
            "type": 61
          },
          "constants": [
            {
              "name": "Deposit",
              "type": 6,
              "value": "0x00c0afd6913600000000000000000000",
              "docs": [
                " The amount of balance that will be taken for each DID as a deposit",
                " to incentivise fair use of the on chain storage. The deposit can be",
                " reclaimed when the DID is deleted."
              ]
            }
          ],
          "errors": {
            "type": 308
          },
          "index": 67
        },
        {
          "name": "Web3Names",
          "storage": {
            "prefix": "Web3Names",
            "items": [
              {
                "name": "Owner",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 63,
                    "value": 309
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map of name -> ownership details."
                ]
              },
              {
                "name": "Names",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 63
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map of owner -> name."
                ]
              },
              {
                "name": "Banned",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 63,
                    "value": 36
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map of name -> ().",
                  "",
                  " If a name key is present, the name is currently banned."
                ]
              }
            ]
          },
          "calls": {
            "type": 234
          },
          "events": {
            "type": 62
          },
          "constants": [
            {
              "name": "Deposit",
              "type": 6,
              "value": "0x00d450a85d6b00000000000000000000",
              "docs": [
                " The amount of KILT to deposit to claim a name."
              ]
            },
            {
              "name": "MinNameLength",
              "type": 7,
              "value": "0x03000000",
              "docs": [
                " The min encoded length of a name."
              ]
            },
            {
              "name": "MaxNameLength",
              "type": 7,
              "value": "0x20000000",
              "docs": [
                " The max encoded length of a name."
              ]
            }
          ],
          "errors": {
            "type": 310
          },
          "index": 68
        },
        {
          "name": "ParachainSystem",
          "storage": {
            "prefix": "ParachainSystem",
            "items": [
              {
                "name": "PendingValidationCode",
                "modifier": "Default",
                "type": {
                  "plain": 10
                },
                "fallback": "0x00",
                "docs": [
                  " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                  "",
                  " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                  " which will result the next block process with the new validation code. This concludes the upgrade process.",
                  "",
                  " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
                ]
              },
              {
                "name": "NewValidationCode",
                "modifier": "Optional",
                "type": {
                  "plain": 10
                },
                "fallback": "0x00",
                "docs": [
                  " Validation code that is set by the parachain and is to be communicated to collator and",
                  " consequently the relay-chain.",
                  "",
                  " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                  " the value."
                ]
              },
              {
                "name": "ValidationData",
                "modifier": "Optional",
                "type": {
                  "plain": 237
                },
                "fallback": "0x00",
                "docs": [
                  " The [`PersistedValidationData`] set for this block.",
                  " This value is expected to be set only once per block and it's never stored",
                  " in the trie."
                ]
              },
              {
                "name": "DidSetValidationCode",
                "modifier": "Default",
                "type": {
                  "plain": 40
                },
                "fallback": "0x00",
                "docs": [
                  " Were the validation data set to notify the relay chain?"
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Default",
                "type": {
                  "plain": 311
                },
                "fallback": "0x00",
                "docs": [
                  " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                  " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                  " candidate will be invalid.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "RelevantMessagingState",
                "modifier": "Optional",
                "type": {
                  "plain": 313
                },
                "fallback": "0x00",
                "docs": [
                  " The snapshot of some state related to messaging relevant to the current parachain as per",
                  " the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "HostConfiguration",
                "modifier": "Optional",
                "type": {
                  "plain": 318
                },
                "fallback": "0x00",
                "docs": [
                  " The parachain host configuration that was obtained from the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "LastDmqMqcHead",
                "modifier": "Default",
                "type": {
                  "plain": 319
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The last downward message queue chain head we have observed.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "LastHrmpMqcHeads",
                "modifier": "Default",
                "type": {
                  "plain": 320
                },
                "fallback": "0x00",
                "docs": [
                  " The message queue chain heads we have observed per each channel incoming channel.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "ProcessedDownwardMessages",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of downward messages processed in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpWatermark",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  " HRMP watermark that was set in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpOutboundMessages",
                "modifier": "Default",
                "type": {
                  "plain": 323
                },
                "fallback": "0x00",
                "docs": [
                  " HRMP messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "UpwardMessages",
                "modifier": "Default",
                "type": {
                  "plain": 76
                },
                "fallback": "0x00",
                "docs": [
                  " Upward messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "PendingUpwardMessages",
                "modifier": "Default",
                "type": {
                  "plain": 76
                },
                "fallback": "0x00",
                "docs": [
                  " Upward messages that are still pending and not yet send to the relay chain."
                ]
              },
              {
                "name": "AnnouncedHrmpMessagesPerCandidate",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                  " announcing the weight of `on_initialize` and `on_finalize`."
                ]
              },
              {
                "name": "ReservedXcmpWeightOverride",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "ReservedDmpWeightOverride",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The weight we reserve at the beginning of the block for processing DMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 9
                },
                "fallback": "0x00",
                "docs": [
                  " The next authorized upgrade, if there is one."
                ]
              },
              {
                "name": "CustomValidationHeadData",
                "modifier": "Optional",
                "type": {
                  "plain": 10
                },
                "fallback": "0x00",
                "docs": [
                  " A custom head data that should be returned as result of `validate_block`.",
                  "",
                  " See [`Pallet::set_custom_validation_head_data`] for more information."
                ]
              }
            ]
          },
          "calls": {
            "type": 235
          },
          "events": {
            "type": 65
          },
          "constants": [],
          "errors": {
            "type": 325
          },
          "index": 80
        },
        {
          "name": "ParachainInfo",
          "storage": {
            "prefix": "ParachainInfo",
            "items": [
              {
                "name": "ParachainId",
                "modifier": "Default",
                "type": {
                  "plain": 243
                },
                "fallback": "0x64000000",
                "docs": []
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 81
        }
      ],
      "extrinsic": {
        "type": 326,
        "version": 4,
        "signedExtensions": [
          {
            "identifier": "CheckSpecVersion",
            "type": 328,
            "additionalSigned": 7
          },
          {
            "identifier": "CheckTxVersion",
            "type": 329,
            "additionalSigned": 7
          },
          {
            "identifier": "CheckGenesis",
            "type": 330,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckMortality",
            "type": 331,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckNonce",
            "type": 333,
            "additionalSigned": 36
          },
          {
            "identifier": "CheckWeight",
            "type": 334,
            "additionalSigned": 36
          },
          {
            "identifier": "ChargeTransactionPayment",
            "type": 335,
            "additionalSigned": 36
          }
        ]
      },
      "type": 336
    }
  }
}